syntax aaa ;; SynD ("aaa", [])
syntax bbb ;; SynD ("bbb", [])

syntax aaa = bbb ;; TypD ("aaa", [], NotT (PlainT (VarT ("bbb", []))))
syntax bbb = aaa ;; TypD ("bbb", [], NotT (PlainT (VarT ("aaa", []))))

syntax foo<x> =
  | AAA int
  | BBB X
  | CCC foo<x>

;; TypD ("foo", [ "X" ],
;;        VariantT [
;;          (SeqT [ AtomT "AAA"; PlainT (IntT) ]) 
;;          (SeqT [ AtomT "BBB"; PlainT (VarT ("X", [])) ])
;;          (SeqT [ AtomT "CCC"; PlainT (VarT ("foo", [ VarT ("X", []) ])) ])
;;        ])

syntax bar =
  | DDD foo<int>
  | EEE nat

;; TypD ("bar", [ "X" ],
;;        VariantT [
;;          (SeqT [ AtomT "DDD"; PlainT (VarT ("foo", [ IntT ])) ])
;;          (SeqT [ AtomT "EEE"; PlainT (NumT `NatT) ])
;;        ])

syntax baz =
  | foo<int>
  | bar

;; TypD ("baz", [],
;;        VariantT [
;;          (PlainT (VarT ("foo", [ IntT ])))
;;          (PlainT (VarT ("bar", [])))
;;        ])

relation BazBaz:
  bar |- foo<int> : baz  ;;hint(input %1 %2)

;; `relation` relid`:` nottyp
;; RelD ("BazBaz",
;;       InfixT (
;;          PlainT (VarT ("bar", [])),
;;          AtomT `Turnstile,
;;          InfixT (
;;           PlainT (VarT ("foo", [ IntT ])),
;;           AtomT `Colon,
;;           PlainT (VarT ("baz", [])))))

rule BazBaz/buzz:
  E 1 |- BBB 2 : DDD (AAA 3)

syntax boo = foo<int> -> bar -> baz
