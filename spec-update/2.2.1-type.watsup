;;
;; Types
;;

;; Forward declarations

syntax typeIR, polyTypeDefIR, funcTypeDefIR

;;
;;;; Parameter types
;;

syntax paramTypeIR = id direction typeIR val?

;;
;;;; Base types
;;

;;
;;;;;; Primitive types
;;

syntax primTypeIR =
  | VOID
  | BOOL
  | ERROR
  | MATCH_KIND
  | STRING

;;
;;;;;;; Numeric types
;;

syntax numTypeIR =
  | INT
  | BIT `< nat >
  | INT `< nat >
  | VARBIT `< nat >

syntax baseTypeIR = primTypeIR | numTypeIR

;;
;;;; Named types
;;

syntax namedTypeIR =
  | `@ tid 
  | polyTypeDefIR `< typeIR* >

;;
;;;; Defined types
;;

;;
;;;;;; Typedef types
;;

syntax typedefTypeIR =
  | TYPEDEF tid typeIR
  | TYPE tid typeIR

;;
;;;;;; Data types
;;

syntax dataTypeIR =
  | LIST `< typeIR >
  | TUPLE `< typeIR* >
  | typeIR `[ nat ]
  | HEADER tid `{ (typeIR, id)* }
  | HEADER_UNION tid `{ (typeIR, id)* }
  | STRUCT tid `{ (typeIR, id)* }
  | ENUM tid `{ id* }
  | ENUM typeIR tid `{ (id, val)* }

;;
;;;;;; Object types
;;

syntax objTypeIR =
  | EXTERN tid map<fid, funcTypeDefIR>
  | PARSER `( paramTypeIR* )
  | CONTROL `( paramTypeIR* )
  | PACKAGE `< typeIR* >
  | TABLE tid `{ typeIR }

syntax defTypeIR =
  | typedefTypeIR
  | dataTypeIR
  | objTypeIR

;;
;;;; Synthesized types
;;

syntax synthTypeIR =
  | DEFAULT
  | SEQ `< typeIR* >
  | SEQ `< typeIR* `, `... >
  | RECORD `{ (typeIR, id)* }
  | RECORD `{ (typeIR, id)* `, `... }
  | INVALID
  | SET `< typeIR* >
  | PARSERSTATE
  | ENUM_TABLE tid `{ id* }
  | STRUCT_TABLE tid `{ (typeIR, id)* }
  | `_

syntax typeIR = baseTypeIR | namedTypeIR | defTypeIR | synthTypeIR

;;
;; Type definitions
;;

syntax monoTypeDefIR = typeIR

syntax polyTypeDefIR = typeIR `< tid* `, tid* >

syntax typeDefIR = monoTypeDefIR | polyTypeDefIR

;;
;; Function types
;;

syntax funcTypeIR =
  | ACTION `( paramTypeIR* )
  | EXTERN_FUNC `( paramTypeIR* ) -> typeIR
  | FUNC `( paramTypeIR* ) -> typeIR
  | BUILTIN `( paramTypeIR* ) -> typeIR
  | EXTERN_METHOD `( paramTypeIR* ) -> typeIR
  | EXTERN_ABSTRACT_METHOD `( paramTypeIR* ) -> typeIR
  | PARSER_APPLY `( paramTypeIR* )
  | CONTROL_APPLY `( paramTypeIR* )
  | TABLE_APPLY -> typeIR

;;
;; Function type definitions
;;

syntax monoFuncTypeDefIR = funcTypeIR

syntax polyFuncTypeDefIR = funcTypeIR `< tid* `, tid* >

syntax funcTypeDefIR = monoFuncTypeDefIR | polyFuncTypeDefIR

;;
;;;; Constructor Parameter types
;;

syntax consParamTypeIR = paramTypeIR

;;
;;;; Constructor types
;;

syntax consTypeIR = `( consParamTypeIR* ) -> typeIR

;;
;;;; Constructor type definitions
;;

syntax consTypeDefIR = consTypeIR `< tid* `, tid* >
