;;
;; Cursor
;;

syntax cursor = GLOBAL | BLOCK | LOCAL

var p : cursor

;;
;; Layered context
;;

;; Global layer

syntax glayer =
  { CDENV cdenv,
    TDENV tdenv,
    FDENV fdenv,
    FRAME frame }

;; Block layer

syntax blayer =
  { ID name,
    TDENV tdenv,
    FDENV fdenv,
    FRAME frame }

;; Local layer

syntax llayer =
  { ID name,
    TDENV tdenv,
    FRAMES frame* }

;;
;; Typing context
;;

syntax context =
  { GLOBAL glayer,
    BLOCK blayer,
    LOCAL llayer }

var C : context

;;
;; Constructor
;;

dec $empty_context : context

def $empty_context = C
  -- if glayer =
      { CDENV $empty_cdenv,
        TDENV $empty_tdenv,
        FDENV $empty_fdenv,
        FRAME $empty_frame }
  -- if blayer =
      { ID `$ "",
        TDENV $empty_tdenv,
        FDENV $empty_fdenv,
        FRAME $empty_frame }
  -- if llayer =
      { ID `$ "",
        TDENV $empty_tdenv,
        FRAMES ([ $empty_frame ]) }
  -- if C = { GLOBAL glayer, BLOCK blayer, LOCAL llayer }

;;
;; Scoping
;;

dec $scopeof(cursor, prefixedNonTypeName) : (cursor, name)

def $scopeof(p, nonTypeName) = (p, nonTypeName)
def $scopeof(p, `. nonTypeName) = (GLOBAL, nonTypeName)

;;
;; Bound type variabls
;;

dec $bound(cursor, context) : bound

def $bound(GLOBAL, C) = `{ eps }
def $bound(BLOCK, C) = $dom_map<name, typeDefIR>(C.BLOCK.TDENV)
def $bound(LOCAL, C) = $union_set<name>(bound_block, bound_local)
  -- if bound_block = $bound(BLOCK, C)
  -- if bound_local = $dom_map<name, typeDefIR>(C.LOCAL.TDENV)

;;
;; Frame entry and exit
;;

dec $enter(context) : context

def $enter(C) = C[ .LOCAL.FRAMES = $empty_frame :: C.LOCAL.FRAMES ]

dec $exit(context) : context

def $exit(C) = C[ .LOCAL.FRAMES = frame_t* ]
  -- if frame_h :: frame_t* = C.LOCAL.FRAMES

;;
;; Return type tracking
;;

dec $return(llayer) : typeIR

;;
;; Adders
;;

;;; Adder for variables

dec $add_var(cursor, context, name, varTypeIR) : context
dec $add_vars(cursor, context, name*, varTypeIR*) : context

def $add_var(GLOBAL, C, name, varTypeIR) = C[ .GLOBAL.FRAME = frame ]
  -- if frame = $add_map<name, varTypeIR>(C.GLOBAL.FRAME, name, varTypeIR)

def $add_var(BLOCK, C, name, varTypeIR) = C[ .BLOCK.FRAME = frame ]
  -- if frame = $add_map<name, varTypeIR>(C.BLOCK.FRAME, name, varTypeIR)

def $add_var(LOCAL, C, name, varTypeIR) = C[ .LOCAL.FRAMES = frame* ]
  -- if frame_h :: frame_t* = C.LOCAL.FRAMES
  -- if frame_h_update = $add_map<name, varTypeIR>(frame_h, name, varTypeIR)
  -- if frame* = frame_h_update :: frame_t*

def $add_vars(p, C, eps, eps) = C

def $add_vars(p, C, name_h :: name_t*, varTypeIR_h :: varTypeIR_t*) = C''
  -- if C' = $add_var(p, C, name_h, varTypeIR_h)
  -- if C'' = $add_vars(p, C', name_t*, varTypeIR_t*)

;;; Adder for parameters

dec $add_param(cursor, context, paramTypeIR) : context
dec $add_params(cursor, context, paramTypeIR*) : context

def $add_param(cursor, C, name direction typeIR eps) = C'
  -- if varTypeIR = typeIR direction eps DYN
  -- if C' = $add_var(cursor, C, name, varTypeIR)
def $add_param(cursor, C, name direction typeIR val) = C'
  -- if varTypeIR = typeIR direction val DYN
  -- if C' = $add_var(cursor, C, name, varTypeIR)

def $add_params(cursor, C, eps) = C
def $add_params(cursor, C, paramTypeIR_h :: paramTypeIR_t*) = C''
  -- if C' = $add_param(cursor, C, paramTypeIR_h)
  -- if C'' = $add_params(cursor, C', paramTypeIR_t*)

;;; Adder for constructor parameters

dec $add_consParam(context, consParamTypeIR) : context
dec $add_consParams(context, consParamTypeIR*) : context

def $add_consParam(C, name direction typeIR eps) = C'
  -- if varTypeIR = typeIR direction eps CTK -- if C' = $add_var(BLOCK, C, name, varTypeIR)
def $add_consParam(C, name direction typeIR val) = C'
  -- if varTypeIR = typeIR direction val CTK
  -- if C' = $add_var(BLOCK, C, name, varTypeIR)

def $add_consParams(C, eps) = C
def $add_consParams(C, consParamTypeIR_h :: consParamTypeIR_t* ) = C''
  -- if C' = $add_consParam(C, consParamTypeIR_h)
  -- if C'' = $add_consParams(C', consParamTypeIR_t*)

;;; Adder for types

dec $add_type(cursor, context, name, typeDefIR) : context

def $add_type(GLOBAL, C, name, typeDefIR) = C'
  -- if tdenv = C.GLOBAL.TDENV
  -- if tdenv_update
        = $add_map<name, typeDefIR>(tdenv, name, typeDefIR)
  -- if C' = C [ .GLOBAL.TDENV = tdenv_update ]

def $add_type(BLOCK, C, name, typeDefIR) = C'
  -- if tdenv = C.BLOCK.TDENV
  -- if tdenv_update
        = $add_map<name, typeDefIR>(tdenv, name, typeDefIR)
  -- if C' = C [ .BLOCK.TDENV = tdenv_update ]

;;; Adder for functions

dec $add_func(cursor, context, funcName, funcTypeDefIR) : context

def $add_func(GLOBAL, C, funcName, funcTypeDefIR) = C'
  -- if fdenv = C.GLOBAL.FDENV
  -- if fdenv_update
        = $add_map<funcName, funcTypeDefIR>(fdenv, funcName, funcTypeDefIR)
  -- if C' = C [ .GLOBAL.FDENV = fdenv_update ]

def $add_func(BLOCK, C, funcName, funcTypeDefIR) = C'
  -- if fdenv = C.BLOCK.FDENV
  -- if fdenv_update
        = $add_map<funcName, funcTypeDefIR>(fdenv, funcName, funcTypeDefIR)
  -- if C' = C [ .BLOCK.FDENV = fdenv_update ]

;;; Adder for constructors

dec $add_cons(context, consName, consTypeDefIR) : context

def $add_cons(C, consName, consTypeDefIR) = C'
  -- if cdenv = C.GLOBAL.CDENV
  -- if cdenv_update
        = $add_map<consName, consTypeDefIR>(cdenv, consName, consTypeDefIR)
  -- if C' = C [ .GLOBAL.CDENV = cdenv_update ]

;;
;; Finders
;;

;;; Finder for variables

dec $find_var(cursor, context, name) : varTypeIR?

def $find_var(GLOBAL, C, name)
  = $find_map<name, varTypeIR>(frame, name)
  -- if frame = C.GLOBAL.FRAME

def $find_var(BLOCK, C, name) = varTypeIR
  -- if frame = C.BLOCK.FRAME
  -- if varTypeIR
      = $find_map<name, varTypeIR>(frame, name)

def $find_var(BLOCK, C, name)
  = $find_var(GLOBAL, C, name)
  -- if frame = C.BLOCK.FRAME
  -- if eps
      = $find_map<name, varTypeIR>(frame, name)

def $find_var(LOCAL, C, name) = varTypeIR
  -- if frame* = C.LOCAL.FRAMES
  -- if varTypeIR
      = $find_maps<name, varTypeIR>(frame*, name)

def $find_var(LOCAL, C, name)
  = $find_var(BLOCK, C, name)
  -- if frame* = C.LOCAL.FRAMES
  -- if eps
      = $find_maps<name, varTypeIR>(frame*, name)

;;; Finder for values

dec $find_val(cursor, context, name) : val?

;;; Finder for type definitions

dec $find_typedef(cursor, context, typeName) : typeDefIR?

;;; Finder for functions

dec $find_func(cursor, context, funcName) : funcTypeDefIR?

dec $find_func_named(cursor, context, name) : funcTypeDefIR?

def $find_func_named(GLOBAL, C, name)
  = $find_func_by_name(C.GLOBAL.FDENV, name)

def $find_func_named(BLOCK, C, name) = funcTypeDefIR
  -- if funcTypeDefIR = $find_func_by_name(C.BLOCK.FDENV, name)

def $find_func_named(BLOCK, C, name) = $find_func_named(GLOBAL, C, name)
  -- if eps  = $find_func_by_name(C.BLOCK.FDENV, name)

def $find_func_named(LOCAL, C, name) = $find_func_named(BLOCK, C, name)
