;;
;; Table context
;;

syntax matchKey = (typeIR, id)

syntax matchAction = (id, paramTypeIR*, argumentListIR)

syntax matchPriority =
  { VALUES int*,
    INIT bool,
    DELTA int,
    LARGEST_WINS bool }

var prt : matchPriority

syntax matchEntry =
  { SIZE int,
    CONST bool }

var ent : matchEntry

syntax matchMode =
  | NOPRI
  | NOPRILPM nat
  | PRI
  | PRILPM

syntax tblctx =
  { KEYS matchKey*,
    ACTIONS matchAction*,
    PRIORITIES matchPriority,
    ENTRIES matchEntry,
    MODE matchMode }

;;
;; State per table entry
;;

syntax tblstate =
  | LPM nat
  | NOLPM

;;
;; Constructor
;;

dec $empty_tblctx: tblctx
def $empty_tblctx
    = { KEYS eps,
        ACTIONS eps,
        PRIORITIES matchPriority,
        ENTRIES matchEntry,
        MODE NOPRI }
  -- if matchPriority
        = { VALUES eps,
            INIT false,
            DELTA 1,
            LARGEST_WINS true }
  -- if matchEntry
        = { SIZE 0,
            CONST true }

;;
;; Adders
;;

;;; Adder for actions

dec $add_action(tblctx, id, paramTypeIR*, argumentListIR)
  : tblctx

def $add_action(tblctx, id, paramTypeIR*, argumentListIR)
  = tblctx[ .ACTIONS = tblctx.ACTIONS ++ [ matchAction ] ]
  -- if matchAction = (id, paramTypeIR*, argumentListIR)

;;
;; Finders
;;

;;; Finder for actions

dec $find_action(tblctx, id) : (paramTypeIR*, argumentListIR)?
dec $find_action'(matchAction*, id) : (paramTypeIR*, argumentListIR)?

def $find_action(tblctx, id) = $find_action'(tblctx.ACTIONS, id)

def $find_action'(eps, id) = eps

def $find_action'(matchAction_h :: matchAction_t*, id)
  = (paramTypeIR*, argumentListIR)
  -- if (id, paramTypeIR*, argumentListIR) = matchAction_h

def $find_action'(matchAction_h :: matchAction_t*, id)
  = $find_action'(matchAction_t*, id)
  -- if (id_h, _, _) = matchAction_h
  -- if id_h =/= id 
