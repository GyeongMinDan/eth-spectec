;;
;; Static type representation
;;

syntax varTypeIR = typeIR direction val? ctk

;;
;; Environments
;;

;; Map from variable identifiers to static types
syntax frame = map<id, varTypeIR>

dec $empty_frame() : frame
def $empty_frame() = $empty_map<id, varTypeIR>

;; Map from type identifiers to type definitions
syntax tdenv = map<tid, typeDefIR>

dec $empty_tdenv() : tdenv
def $empty_tdenv() = $empty_map<tid, typeDefIR>

;; Map from function identifiers to function type definitions
syntax fdenv = map<fid, funcTypeDefIR>

dec $empty_fdenv() : fdenv
def $empty_fdenv() = $empty_map<fid, funcTypeDefIR>

;; Map from constructor identifiers to constructor type definitions
syntax cdenv = map<cid, consTypeDefIR>

dec $empty_cdenv() : cdenv
def $empty_cdenv() = $empty_map<cid, consTypeDefIR>

;;
;; Function/method/constructor overload resolution
;;

dec $check_func_name(id, id) : bool
def $check_func_name(id_l, id_r) = id_l = id_r

dec $check_arity_more((id?)*, id*) : bool
def $check_arity_more((id_arg?)*, id_param*) = $(|(id_arg?)*| > |id_param*|)

dec $check_arity((id?)*, id*) : bool
def $check_arity((id_arg?)*, id_param*) = $(|(id_arg?)*| = |id_param*|)

dec $check_arity_less((id?)*, id*) : bool
def $check_arity_less((id_arg?)*, id_param*) = $(|(id_arg?)*| < |id_param*|)

dec $get_params_missing_names(id*, id*) : id*

def $get_params_missing_names(eps, id_arg*) = eps
def $get_params_missing_names(
    id_param_h :: id_param_t*,
    id_arg*
  )
  = id_param_h :: $get_params_missing_names(id_param_t*, id_arg*)
  -- if ~$in_set<id>(id_param_h, `{ id_arg* })
def $get_params_missing_names(
    id_param_h :: id_param_t*,
    id_arg*
  )
  = $get_params_missing_names(id_param_t*, id_arg*)
  -- otherwise

;; Check match between parameters and named arguments
dec $find_match_named<V>(fid, V, id*, pid*) : (fid, V, id*)?

def $find_match_named<V>(fid, V, id_arg*, (bool_param id_param)*) = (fid, V, eps)
  -- if $eq_set<id>(`{ id_arg* }, `{ id_param* })
def $find_match_named<V>(fid, V, id_arg*, pid*) = eps
  -- otherwise

;; Check match between parameters and named arguments, with default arguments
dec $find_match_named_default<V>(fid, V, id*, pid*) : (fid, V, id*)?

def $find_match_named_default<V>(fid, V, id_arg*, (bool_param id_param)*) = (fid, V, id_default*)
  -- if id_default* = $get_params_missing_names(id_param*, id_arg*)
  -- if $find_match_named<V>(fid, V, id_arg* ++ id_default*, (bool_param id_param)*) =/= eps
def $find_match_named_default<V>(fid, V, id_a*, pid*) = eps
  -- otherwise

;; Check match between parameters and unnamed arguments, with default arguments
dec $find_match_unnamed_default<V>(fid, V, (id?)*, pid*) : (fid, V, id*)?

def $find_match_unnamed_default<V>(fid, V, (id_arg?)*, pid*) = (fid, V, id_default*)
  -- if (_, (true id_default)*) = $partition_<pid>(pid*, |(id_arg?)*|)
def $find_match_unnamed_default<V>(fid, V, (id_a?)*, pid*) = eps
  -- otherwise

;; Check if a function matches the given name and arguments
dec $find_matching_func<V>(id, (id?)*, id*, fid, V) : (fid, V, id*)?

;; When function names do not match
def $find_matching_func<V>(id_f, (id_arg?)*, id_arg'*, id_f' `( pid_f'* ), V) = eps
  -- if ~$check_func_name(id_f, id_f')
;; When function names match, but the arity of arguments is greater than that of parameters
def $find_matching_func<V>(id_f, (id_arg?)*, id_arg'*, id_f' `( (bool_param' id_param')* ), V) = eps
  -- if $check_func_name(id_f, id_f')
  -- if $check_arity_more((id_arg?)*, id_param'*)
;; When function names and arity match on named arguments, i.e., no default arguments
def $find_matching_func<V>(id_f, (id_arg?)*, id_arg'*, id_f' `( (bool_param' id_param')* ), V)
  = $find_match_named<V>(id_f' `( (bool_param' id_param')* ), V, id_arg'*, (bool_param' id_param')*)
  -- if $(|id_arg'*| > 0)
  -- if $check_func_name(id_f, id_f')
  -- if $check_arity((id_arg?)*, id_param'*)
;; When function names and arity match on unnamed arguments, i.e., no default arguments
def $find_matching_func<V>(id_f, (id_arg?)*, eps, id_f' `( (bool_param' id_param')* ), V)
  = (id_f' `( (bool_param' id_param')* ), V, eps)
  -- if $check_func_name(id_f, id_f')
  -- if $check_arity((id_arg?)*, id_param'*)
;; When function names match and arity is less than that of parameters, with named arguments
def $find_matching_func<V>(id_f, (id_arg?)*, id_arg'*, id_f' `( (bool_param' id_param')* ), V)
  = $find_match_named_default<V>(id_f' `( (bool_param' id_param')* ), V, id_arg'*, (bool_param' id_param')*)
  -- if $(|id_arg'*| > 0)
  -- if $check_func_name(id_f, id_f')
  -- if $check_arity_less((id_arg?)*, id_param'*)
;; When function names match and arity is less than that of parameters, with unnamed arguments
def $find_matching_func<V>(id_f, (id_arg?)*, eps, id_f' `( (bool_param' id_param')* ), V)
  = $find_match_unnamed_default<V>(id_f' `( (bool_param' id_param')* ), V, (id_arg?)*, (bool_param' id_param')*)
  -- if $check_func_name(id_f, id_f')
  -- if $check_arity_less((id_arg?)*, id_param'*)

;; Find all functions that match the given name and arguments
dec $find_matching_funcs<V>(id, (id?)*, id*, fid*, V*) : (fid, V, id*)*

def $find_matching_funcs<V>(id_f, (id_arg?)*, id_arg'*, eps, eps) = eps
def $find_matching_funcs<V>(id_f, (id_arg?)*, id_arg'*, fid_h :: fid_t*, V_h :: V_t*)
  = $find_matching_funcs<V>(id_f, (id_arg?)*, id_arg'*, fid_t*, V_t*)
  -- if $find_matching_func<V>(id_f, (id_arg?)*, id_arg'*, fid_h, V_h) = eps
def $find_matching_funcs<V>(id_f, (id_arg?)*, id_arg'*, fid_h :: fid_t*, V_h :: V_t*)
  = (fid, V, id_default*) :: $find_matching_funcs<V>(id_f, (id_arg?)*, id_arg'*, fid_t*, V_t*)
  -- if (fid, V, id_default*) = $find_matching_func<V>(id_f, (id_arg?)*, id_arg'*, fid_h, V_h)

;; Find a matching function, given a function name and arguments
dec $find_func<V>(map<fid, V>, id, (id?)*) : (fid, V, id*)?

;; When all arguments are named
def $find_func<V>(`{ (fid `: V)* }, id_f, (id_arg?)*) = eps
  -- if $(|(id_arg?)*| > 0)
  -- if (id_arg? = id_arg')*
  -- if $find_matching_funcs<V>(id_f, (id_arg?)*, id_arg'*, fid*, V*) = eps
def $find_func<V>(`{ (fid `: V)* }, id_f, (id_arg?)*) = (fid', V', id_default*)
  -- if $(|(id_arg?)*| > 0)
  -- if (id_arg? = id_arg')*
  -- if (fid', V', id_default*) = $find_matching_funcs<V>(id_f, (id_arg?)*, id_arg'*, fid*, V*)
;; When all arguments are unnamed
def $find_func<V>(`{ (fid `: V)* }, id_f, (id_arg?)*) = eps
  -- if (id_arg? = eps)*
  -- if $find_matching_funcs<V>(id_f, (id_arg?)*, eps, fid*, V*) = eps
def $find_func<V>(`{ (fid `: V)* }, id_f, (id_arg?)*) = (fid', V', id_default*)
  -- if (id_arg? = eps)*
  -- if (fid', V', id_default*) = $find_matching_funcs<V>(id_f, (id_arg?)*, eps, fid*, V*)

;;
;; Function/method/constructor non-overload resolution
;;

dec $find_func_by_id(map<fid, funcTypeDefIR>, id) : funcTypeDefIR?
dec $find_func_by_id'(map<fid, funcTypeDefIR>, id) : funcTypeDefIR*

def $find_func_by_id(fdenv, id) = funcTypeDefIR
  -- if funcTypeDefIR = $find_func_by_id'(fdenv, id)
def $find_func_by_id(fdenv, id) = eps
  -- otherwise

def $find_func_by_id'(`{ eps }, id) = eps
def $find_func_by_id'(
    `{ (fid_h `: funcTypeDefIR_h) :: (fid_t `: funcTypeDefIR_t)* },
    id
  )
  = [ funcTypeDefIR_h ] ++ funcTypeDefIR_t_found*
  -- if id_h `( _ ) = fid_h
  -- if funcTypeDefIR_t_found*
   = $find_func_by_id'(`{ (fid_t `: funcTypeDefIR_t)* }, id)
def $find_func_by_id'(
    `{ (fid_h `: funcTypeDefIR_h) :: (fid_t `: funcTypeDefIR_t)* },
    id
  )
  = funcTypeDefIR_t_found*
  -- if id_h `( _ ) = fid_h
  -- if id =/= id_h
  -- if funcTypeDefIR_t_found*
   = $find_func_by_id'(`{ (fid_t `: funcTypeDefIR_t)* }, id)
