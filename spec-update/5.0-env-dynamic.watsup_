;; type t =
;;   | VarLV of L.var'
;;   | BitAccLV of t * Value.t * Value.t
;;   | ArrAccLV of t * Value.t
;;   | ExprAccLV of t * L.member'
syntax lvalueDyn =
  | VarLV name
  | BitAccLV lvalueDyn val val
  | ArrAccLV lvalueDyn val
  | ExprAccLV lvalueDyn member

syntax stateDyn = blockStatementIR

syntax objName = name*

syntax venv = map<name, val>
syntax senv = map<name, stateDyn>
syntax theta = map<name, typeIR>

syntax fenv ;; Forward declaration
;; type t =
;;   | BuiltinMethodF of param list * LValue.t
;;   | ActionF of param list * block
;;   | FuncF of tparam list * param list * block
;;   | ExternFuncF of tparam list * param list
;;   | ExternMethodF of tparam list * param list * block option
;;   | ExternAbstractMethodF of tparam list * param list
;;   | ParserApplyMethodF of param list * decl list * State.t IdMap.t
;;   | ControlApplyMethodF of param list * decl list * t FIdMap.t * block
;;   | TableApplyMethodF of Table.t
syntax funcDyn =
  | BuiltinMethodF paramTypeIR* lvalueDyn
  | ActionF paramTypeIR* blockStatementIR
  | FuncF name* paramTypeIR* blockStatementIR
  | ExternFuncF name* paramTypeIR* blockStatementIR?
  | ExternMethodF name* paramTypeIR*
  | ParserApplyMethodF paramTypeIR* declarationIR* senv
  | ControlApplyMethodF paramTypeIR* declarationIR* fenv blockStatementIR
  | TableApplyMethodF tablePropertyListIR

syntax fenv = map<funcName, funcDyn>

;; type t =
;;   | ExternC of L.id' * tparam list * cparam list * mthd list
;;   | ParserC of
;;       tparam list * cparam list * param list * decl list * parser_state list
;;   | ControlC of tparam list * cparam list * param list * decl list * block
;;   | PackageC of tparam list * cparam list
;;   | TableC of L.id' * table
syntax consDyn =
  | ExternC name name* paramTypeIR* methodPrototypeIR*
  | ParserC name* paramTypeIR* paramTypeIR* declarationIR* parserStateIR*
  | ControlC name* paramTypeIR* paramTypeIR* declarationIR* blockStatementIR
  | PackageC name* paramTypeIR*
  | TableC name tablePropertyListIR

syntax cenv = map<consName, consDyn>

;; type t =
;;   | ExternO of L.id' * Type.t TIdMap.t * Value.t IdMap.t * Func.t FIdMap.t
;;   | ParserO of Value.t IdMap.t * L.param list * L.decl list * State.t IdMap.t
;;   | ControlO of
;;       Value.t IdMap.t * L.param list * L.decl list * Func.t FIdMap.t * L.block
;;   | PackageO of Type.t TIdMap.t * Value.t IdMap.t
;;   | TableO of L.id' * Value.t IdMap.t * Table.t
syntax objDyn =
  | ExternObj name theta venv fenv
  | ParserObj venv paramTypeIR* declarationIR* senv
  | ControlO venv paramTypeIR* declarationIR* fenv blockStatementIR
  | PackageO theta venv
  | TableO name venv tablePropertyListIR

syntax sto = map<objName, objDyn>
