;;
;; Environments
;;

syntax stateDyn = blockStatementIR

syntax venv = map<name, value>
syntax senv = map<name, stateDyn>


;;
;; L-values
;;

syntax lvalueDyn =
  | referenceExpressionIR
  | lvalueDyn `. nameIR
  | lvalueDyn `[ value ]
  | lvalueDyn `[ value `: value ]

;;
;; Routines
;;

syntax renv ;; Forward declaration

syntax funcDyn =
  | BUILTIN_FUNCTION `< typeParameterListIR > `( parameterListIR ) `{ blockElementStatementListIR } ;; ??
  | FUNCTION `< typeParameterListIR > `( parameterListIR ) blockStatementIR
  | ACTION  `( parameterListIR ) `{ blockStatementIR }
  | EXTERN_FUNCTION `< typeParameterListIR > `( parameterListIR ) `{ blockElementStatementIR? }

syntax methodDyn =
  | BUILTIN_METHOD `( parameterListIR ) `# lvalueDyn 
  | EXTERN_METHOD `< typeParameterListIR > `( parameterListIR )
  | EXTERN_METHOD ABSTRACT `< typeParameterListIR > `( parameterListIR )
  | PARSER_APPLY `( parameterListIR ) `{ parserLocalDeclarationListIR `; senv }
  | CONTROL_APPLY `( parameterListIR ) `{ controlLocalDeclarationListIR `; renv `; blockElementStatementListIR }
  | TABLE_APPLY `{ tablePropertyListIR }

syntax routineDyn = 
  | funcDyn
  | methodDyn

syntax renv = map<rid, routineDyn>

;;
;; Constructors
;;

syntax consDyn =
  | EXTERN nameIR `< typeParameterListIR > `( constructorParameterListIR ) `{ methodPrototypeListIR }
  | PARSER `< typeParameterListIR > `( parameterListIR ) `( constructorParameterListIR ) `{ parserLocalDeclarationListIR parserStateListIR }
  | CONTROL `< typeParameterListIR > `( parameterListIR ) `( constructorParameterListIR ) `{ controlLocalDeclarationListIR APPLY controlBodyIR }
  | PACKAGE `< typeParameterListIR > `( constructorParameterListIR )
  | TABLE nameIR `{ tablePropertyListIR }

syntax cenv = map<cid, consDyn>

;;
;; Objects
;;

syntax objDyn =
  | EXTERN `{ tid theta venv renv }
  | PARSER `{ venv parameterListIR parserLocalDeclarationListIR senv }
  | CONTROL `{ venv parameterListIR controlLocalDeclarationListIR renv controlBodyIR }
  | PACKAGE `{ theta venv }
  | TABLE `{ tid venv tablePropertyListIR }

syntax sto = map<oid, objDyn>
dec $empty_sto() : sto
def $empty_sto() = $empty_map<oid, objDyn>
dec $add_sto(sto, oid, objDyn) : sto
