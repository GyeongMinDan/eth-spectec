;;
;; Table context
;;

syntax matchKey = (typeIR, id)

syntax matchAction = (prefixedNameIR, parameterTypeIR*, argumentListIR)

syntax matchPriority =
  { VALUES nat*,
    INIT bool,
    DELTA nat,
    LARGEST_WINS bool }

syntax matchEntry =
  { SIZE nat,
    CONST bool }

syntax matchMode =
  ;; does not require explicit priority and is not lpm
  | NOPRI
  ;; does not require explicit priority and is lpm, holding the max prefix
  | NOPRILPM nat
  ;; requires explicit priority and is not lpm
  | PRI
  ;; requires explicit priority and is lpm
  | PRILPM

syntax tablecontext =
  { KEYS matchKey*,
    ACTIONS matchAction*,
    PRIORITIES matchPriority,
    ENTRIES matchEntry,
    MODE matchMode }

var TC : tablecontext

;;
;; State per table entry
;;

syntax tableEntryState =
  ;; the entry is lpm, holding the prefix length
  | LPM nat
  ;; the entry is not lpm
  | NOLPM

var TES : tableEntryState

;;
;; Constructor
;;

dec $empty_tablecontext: tablecontext
def $empty_tablecontext
    = { KEYS eps,
        ACTIONS eps,
        PRIORITIES matchPriority,
        ENTRIES matchEntry,
        MODE NOPRI }
  -- if matchPriority
        = { VALUES eps,
            INIT false,
            DELTA 1,
            LARGEST_WINS true }
  -- if matchEntry
        = { SIZE 0,
            CONST true }

;;
;; Adders
;;

;;; Adder for keys

dec $add_key(tablecontext, id, typeIR) : tablecontext

def $add_key(TC, id, typeIR)
  = TC[ .KEYS = TC.KEYS ++ [ matchKey ] ]
  -- if matchKey = (typeIR, id)

;;; Adder for actions

dec $add_action(tablecontext, prefixedNameIR, parameterTypeIR*, argumentListIR) : tablecontext

def $add_action(TC, prefixedNameIR, parameterTypeIR*, argumentListIR)
  = TC[ .ACTIONS = TC.ACTIONS ++ [ matchAction ] ]
  -- if matchAction = (prefixedNameIR, parameterTypeIR*, argumentListIR)

;;; Adder for table entry priorities

dec $add_table_priority(tablecontext, nat) : tablecontext

def $add_table_priority(TC, n)
  = TC[ .PRIORITIES.VALUES = TC.PRIORITIES.VALUES ++ [ n ] ]

;;
;; Updaters
;;

;;; Updater for modes

dec $update_mode(tablecontext, id, typeIR) : tablecontext
dec $update_mode'(tablecontext, id, typeIR) : tablecontext

def $update_mode(TC, id, typeIR) = $update_mode'(TC, id, $canon(typeIR))
def $update_mode'(TC, "lpm", INT `< n >) = TC[ .MODE = NOPRILPM n ]
  -- if TC.MODE = NOPRI
def $update_mode'(TC, "lpm", BIT `< n >) = TC[ .MODE = NOPRILPM n ]
  -- if TC.MODE = NOPRI
def $update_mode'(TC, "lpm", VARBIT `< n >) = TC[ .MODE = NOPRILPM n ]
  -- if TC.MODE = NOPRI
def $update_mode'(TC, "lpm", TYPE _ typeIR)
  = $update_mode(TC, "lpm", typeIR)
def $update_mode'(TC, "lpm", _) = TC[ .MODE = PRILPM ]
  -- if TC.MODE = PRI
def $update_mode'(TC, "range", _) = TC[ .MODE = PRI ]
  -- if TC.MODE = NOPRI
def $update_mode'(TC, "ternary", _) = TC[ .MODE = PRI ]
  -- if TC.MODE = NOPRI
def $update_mode'(TC, "optional", _) = TC[ .MODE = PRI ]
  -- if TC.MODE = NOPRI
def $update_mode'(TC, "range", _) = TC[ .MODE = PRILPM ]
  -- if TC.MODE = NOPRILPM _
def $update_mode'(TC, "ternary", _) = TC[ .MODE = PRILPM ]
  -- if TC.MODE = NOPRILPM _
def $update_mode'(TC, "optional", _) = TC[ .MODE = PRILPM ]
  -- if TC.MODE = NOPRILPM _
def $update_mode'(TC, _, _) = TC
  -- otherwise

;;
;; Finders
;;

;;; Finder for actions

dec $find_action(tablecontext, prefixedNameIR) : (parameterTypeIR*, argumentListIR)?
dec $find_action'(matchAction*, prefixedNameIR) : (parameterTypeIR*, argumentListIR)?

def $find_action(TC, prefixedNameIR) = $find_action'(TC.ACTIONS, prefixedNameIR)

def $find_action'(eps, prefixedNameIR) = eps

def $find_action'(matchAction_h :: matchAction_t*, prefixedNameIR)
  = (parameterTypeIR*, argumentListIR)
  -- if (prefixedNameIR, parameterTypeIR*, argumentListIR) = matchAction_h

def $find_action'(matchAction_h :: matchAction_t*, prefixedNameIR)
  = $find_action'(matchAction_t*, prefixedNameIR)
  -- if (prefixedNameIR_h, _, _) = matchAction_h
  -- if prefixedNameIR_h =/= prefixedNameIR

;;; Finder for last table priority

dec $find_table_priority_last(tablecontext) : nat

def $find_table_priority_last(TC) = n*[|n*| - 1]
  -- if n* = TC.PRIORITIES.VALUES

;;
;; State management
;;

dec $join_tableEntryState(tableEntryState, tableEntryState) : tableEntryState

def $join_tableEntryState(NOLPM, LPM n) = LPM n
def $join_tableEntryState(LPM n, NOLPM) = LPM n
def $join_tableEntryState(NOLPM, NOLPM) = NOLPM

dec $tableEntry_lpm_prefix(value) : nat
dec $tableEntry_lpm_prefix'(value, nat) : nat

def $tableEntry_lpm_prefix(value) = $tableEntry_lpm_prefix'(value, 0)
def $tableEntry_lpm_prefix'(0 W _, n_prefix) = n_prefix
def $tableEntry_lpm_prefix'(w W n, n_prefix)
  = $tableEntry_lpm_prefix'(value', $(n_prefix + 1))
  -- if $(w > 0)
  -- if $(n \ 2 =/= 0)
  -- if value' = $(w - 1) W $((n - 1) / 2)
def $tableEntry_lpm_prefix'(w W n, 0)
  = $tableEntry_lpm_prefix'(value', 0)
  -- if $(w > 0)
  -- if $(n \ 2 = 0)
  -- if value' = $(w - 1) W $(n / 2)
