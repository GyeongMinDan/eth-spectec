;;
;; Function call
;;

rule FunctionType_ok/action:
  p C |- prefixedNameIR `< typeArgumentIR* > `( argument* )
       : functionTypeIR `< `# tid_impl* > `( `# id_default* )
  -- if (rid, routineTypeDefIR, id_default*)
      = $find_routine_overloaded(p, C, prefixedNameIR, argument*)
  -- if (functionTypeIR, tid_impl*)
      = $specialize_routineTypeDef(routineTypeDefIR, typeArgumentIR*)

;;
;; Call
;;

;;; Function call

;;;; Action

rule Call_ok/action:
  p C |- (ACTION `( parameterTypeIR* )) `< eps `# eps > `( argumentIR* `# id_default* )
        : VOID `< eps > `( argumentIR_cast* )
  ---- ;; filter default arguments
  -- if parameterTypeIR_non_default*
      = $filter_default_parameters(parameterTypeIR*, id_default*)
  ---- ;; check arity
  -- if $(|parameterTypeIR_non_default*| = |argumentIR*|)
  ---- ;; align parameters and arguments if named
  -- if parameterTypeIR_aligned*
      = $align_parameters(parameterTypeIR_non_default*, argumentIR*)
  ---- ;; (TODO) check call site
  -- Call_convention_ok:
      p C ACTION |- parameterTypeIR_aligned* `@ argumentIR*
                  : argumentIR_cast*

;;;; Extern function

rule Call_ok/externfunction-noinfer:
  p C |- (EXTERN_FUNCTION `( parameterTypeIR* ) `-> typeIR_ret)
          `< typeArgumentIR* `# eps > `( argumentIR* `# id_default* )
        : typeIR_ret `< typeArgumentIR* > `( argumentIR_cast* )
  ---- ;; filter default arguments
  -- if parameterTypeIR_non_default*
      = $filter_default_parameters(parameterTypeIR*, id_default*)
  ---- ;; check arity
  -- if $(|parameterTypeIR_non_default*| = |argumentIR*|)
  ---- ;; align parameters and arguments if named
  -- if parameterTypeIR_aligned*
      = $align_parameters(parameterTypeIR_non_default*, argumentIR*)
  ---- ;; (TODO) check call site
  -- Call_convention_ok:
      p C NOACTION |- parameterTypeIR_aligned* `@ argumentIR*
                    : argumentIR_cast*

;;; Method call

rule Call_ok/extern-method:
  p C |- (EXTERN_METHOD `( parameterTypeIR* ) `-> typeIR_ret)
          `< typeArgumentIR* `# tid_infer* > `( argumentIR* `# id_default* )
        : typeIR_ret_inferred `< typeArgumentIR_inferred* > `( argumentIR_cast* )
  ---- ;; filter default arguments
  -- if parameterTypeIR_non_default*
      = $filter_default_parameters(parameterTypeIR*, id_default*)
  ---- ;; check arity
  -- if $(|parameterTypeIR_non_default*| = |argumentIR*|)
  ---- ;; align parameters and arguments if named
  -- if parameterTypeIR_aligned*
      = $align_parameters(parameterTypeIR_non_default*, argumentIR*)
  ---- ;; perform type inference
  -- if inference = $infer(tid_infer*, parameterTypeIR_aligned*, argumentIR*)
  -- if (typeIR_inferred = $find_map<tid, typeIR>(inference, tid_infer))*
  -- if typeArgumentIR_inferred* = typeArgumentIR* ++ typeIR_inferred*
  ---- ;; substitute inferred types
  -- if (parameterTypeIR_aligned_inferred
        = $subst_parameterType(inference, parameterTypeIR_aligned))*
  -- if typeIR_ret_inferred
      = $subst_type(inference, typeIR_ret)
  ---- ;; check that the substituted method is still well-formed
  -- if methodTypeIR_inferred
      = EXTERN_METHOD `( parameterTypeIR_aligned_inferred* ) `-> typeIR_ret_inferred
  -- RoutineType_wf: $bound(p, C) |- methodTypeIR_inferred
  ---- ;; (TODO) check call site
  -- Call_convention_ok:
      p C NOACTION |- parameterTypeIR_aligned_inferred* `@ argumentIR*
                    : argumentIR_cast*

rule Call_ok/parser-apply-method:
  p C |- (PARSER_APPLY `( parameterTypeIR* ))
          `< eps `# eps > `( argumentIR* `# id_default* )
        : VOID `< eps > `( argumentIR_cast* )
  ---- ;; filter default arguments
  -- if parameterTypeIR_non_default*
      = $filter_default_parameters(parameterTypeIR*, id_default*)
  ---- ;; check arity
  -- if $(|parameterTypeIR_non_default*| = |argumentIR*|)
  ---- ;; align parameters and arguments if named
  -- if parameterTypeIR_aligned*
      = $align_parameters(parameterTypeIR_non_default*, argumentIR*)
  ---- ;; (TODO) check call site
  -- Call_convention_ok:
      p C NOACTION |- parameterTypeIR_aligned* `@ argumentIR*
                    : argumentIR_cast*

rule Call_ok/control-apply-method:
  p C |- (CONTROL_APPLY `( parameterTypeIR* ))
          `< eps `# eps > `( argumentIR* `# id_default* )
        : VOID `< eps > `( argumentIR_cast* )
  ---- ;; filter default arguments
  -- if parameterTypeIR_non_default*
      = $filter_default_parameters(parameterTypeIR*, id_default*)
  ---- ;; check arity
  -- if $(|parameterTypeIR_non_default*| = |argumentIR*|)
  ---- ;; align parameters and arguments if named
  -- if parameterTypeIR_aligned*
      = $align_parameters(parameterTypeIR_non_default*, argumentIR*)
  ---- ;; (TODO) check call site
  -- Call_convention_ok:
      p C NOACTION |- parameterTypeIR_aligned* `@ argumentIR*
                    : argumentIR_cast*

rule Call_ok/table-apply-method:
  p C |- (TABLE_APPLY `-> typeIR_table) `< eps `# eps > `( eps `# eps )
        : typeIR_table `< eps > `( eps )
