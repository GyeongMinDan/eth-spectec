;;
;; Constructor typing
;;

rule ConstructorType_ok:
  p C |- prefixedNameIR `< typeArgumentIR* > `( argumentIR* )
       : constructorTypeIR `< `# tid_impl* > `( `# id_default* )
  ---- ;; find and specialize the constructor type definition
  -- if (cid, constructorTypeDefIR, id_default*)
      = $find_constructor_overloaded(C, prefixedNameIR, argumentIR*)
  -- if (constructorTypeIR, tid_impl*)
      = $specialize_constructorTypeDef(constructorTypeDefIR, typeArgumentIR*)
  ---- ;; check that the constructor type is well-formed
  -- if bound = $union_set<tid>($bound(p, C), `{ tid_impl* })
  -- ConstructorType_wf: bound |- constructorTypeIR

;;
;; Instantiation
;;

;;; Instantiation of a package

rule Inst_ok/package:
  GLOBAL C |- constructorTypeIR `< typeArgumentIR* `# tid_infer* > 
                                `( argumentIR* `# id_default* )
            : typeIR_object_inferred `< typeArgumentIR_inferred* >
                                      `( argumentIR_cast* )
  ---- ;; if the constructor is for a package object
  -- if CONSTRUCTOR `( parameterTypeIR* ) `-> typeIR_object = constructorTypeIR
  -- if PACKAGE `< _ > = $canon(typeIR_object)
  ---- ;; filter default arguments
  -- if parameterTypeIR_non_default*
      = $filter_default_parameters(parameterTypeIR*, id_default*)
  ---- ;; check arity
  -- if $(|parameterTypeIR_non_default*| = |argumentIR*|)
  ---- ;; align parameters and arguments if named
  -- if parameterTypeIR_aligned*
      = $align_parameters(parameterTypeIR_non_default*, argumentIR*)
  ---- ;; perform type inference
  -- if inference = $infer(tid_infer*, parameterTypeIR_aligned*, argumentIR*)
  -- if (typeIR_inferred = $find_map<tid, typeIR>(inference, tid_infer))*
  -- if typeArgumentIR_inferred* = typeArgumentIR* ++ typeIR_inferred*
  ---- ;; substitute inferred types
  -- if (parameterTypeIR_aligned_inferred
      = $subst_parameterType(inference, parameterTypeIR_aligned))*
  -- if typeIR_object_inferred
      = $subst_type(inference, typeIR_object)
  ---- ;; check that the substituted constructor is still well-formed
  -- if constructorTypeIR_inferred
      = CONSTRUCTOR `( parameterTypeIR_aligned_inferred* ) `-> typeIR_object_inferred
  -- ConstructorType_wf: $bound(GLOBAL, C) |- constructorTypeIR_inferred
  ---- ;; (TODO) check instantiation site
  -- Call_convention_ok:
      BLOCK C NOACTION |- parameterTypeIR_aligned_inferred* `@ argumentIR*
                        : argumentIR_cast*

;;; Instantiation of a non-package

rule Inst_ok/non-package:
  p C |- constructorTypeIR `< typeArgumentIR* `# tid_infer* > 
                           `( argumentIR* `# id_default* )
       : typeIR_object_inferred `< typeArgumentIR_inferred* > `( argumentIR_cast* )
  ---- ;; if the constructor is not for a package object
  -- if CONSTRUCTOR `( parameterTypeIR* ) `-> typeIR_object = constructorTypeIR
  -- if ~$is_package_object_typeIR($canon(typeIR_object))
  ---- ;; filter default arguments
  -- if parameterTypeIR_non_default*
      = $filter_default_parameters(parameterTypeIR*, id_default*)
  ---- ;; check arity
  -- if $(|parameterTypeIR_non_default*| = |argumentIR*|)
  ---- ;; align parameters and arguments if named
  -- if parameterTypeIR_aligned*
      = $align_parameters(parameterTypeIR_non_default*, argumentIR*)
  ---- ;; perform type inference
  -- if inference = $infer(tid_infer*, parameterTypeIR_aligned*, argumentIR*)
  -- if (typeIR_inferred = $find_map<tid, typeIR>(inference, tid_infer))*
  -- if typeArgumentIR_inferred* = typeArgumentIR* ++ typeIR_inferred*
  ---- ;; substitute inferred types
  -- if (parameterTypeIR_aligned_inferred
      = $subst_parameterType(inference, parameterTypeIR_aligned))*
  -- if typeIR_object_inferred
      = $subst_type(inference, typeIR_object)
  ---- ;; check that the substituted constructor is still well-formed
  -- if constructorTypeIR_inferred
      = CONSTRUCTOR `( parameterTypeIR_aligned_inferred* ) `-> typeIR_object_inferred
  -- ConstructorType_wf: $bound(p, C) |- constructorTypeIR_inferred
  ---- ;; (TODO) check instantiation site
  -- Call_convention_ok:
      p C NOACTION |- parameterTypeIR_aligned_inferred* `@ argumentIR*
                    : argumentIR_cast*
