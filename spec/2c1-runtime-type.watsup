;;
;; Parameter Type
;;

syntax paramtyp hint(show %latex("\\tau_\\texttt{p}")) =
  id dir typ val?

var pt : paramtyp hint(show %latex("\\tau_\\texttt{p}"))

;;
;; Type
;;

;; Base type: primitive or numeric type

syntax primtyp hint(show %latex("\\tau_\\texttt{prim}")) =
  | VoidT         hint(show VOID#_#T)
  | ErrT          hint(show ERR#_#T)
  | MatchKindT    hint(show MATCH#_#KIND#_#T)
  | StrT          hint(show STR#_#T)
  | BoolT         hint(show BOOL#_#T)

syntax numtyp hint(show %latex("\\tau_\\texttt{num}")) =
  | IntT          hint(show INT#_#T)
  | FIntT int     hint(show FINT#_#T#%latex("\\langle")#%#%latex("\\rangle"))
  | FBitT int     hint(show FBIT#_#T#%latex("\\langle")#%#%latex("\\rangle"))
  | VBitT int     hint(show VBIT#_#T#%latex("\\langle")#%#%latex("\\rangle"))

syntax basetyp hint(show %latex("\\tau_\\texttt{base}")) =
  | primtyp | numtyp

;;
;; Abstract type
;;

syntax abstyp hint(show %latex("\\tau_\\texttt{abs}")) =
  | VarT id                         hint(show VAR#_#T %)
  | SpecT polytypdef typ*           hint(show SPEC#_#T %#%latex("\\langle")#%#%latex("\\rangle"))

;;
;; Defined type: alias or data or object type
;;

syntax aliastyp hint(show %latex("\\tau_\\texttt{alias}")) =
  | DefT typ                        hint(show DEF#_#T %)

syntax datatyp hint(show %latex("\\tau_\\texttt{data}")) =
  | NewT id typ                     hint(show NEW#_#T % %)
  | EnumT id member*                hint(show ENUM#_#T % %latex("\\{")#%#%latex("\\}"))
  | SEnumT id typ (member, val)*    hint(show SENUM#_#T % % %latex("\\{")#%#%latex("\\}"))
  | ListT typ                       hint(show LIST#_#T %)
  | TupleT typ*                     hint(show TUPLE#_#T %)
  | StackT typ int                  hint(show STACK#_#T %#`[%])
  | StructT id (member, typ)*       hint(show STRUCT#_#T % %latex("\\{")#%#%latex("\\}"))
  | HeaderT id (member, typ)*       hint(show HEADER#_#T % %latex("\\{")#%#%latex("\\}"))
  | UnionT id (member, typ)*        hint(show UNION#_#T % %latex("\\{")#%#%latex("\\}"))

syntax objtyp hint(show %latex("\\tau_\\texttt{obj}")) =
  | ExternT id map(fid, funcdef)    hint(show EXTERN#_#T % %)
  | ParserT paramtyp*               hint(show PARSER#_#T (%))
  | ControlT paramtyp*              hint(show CONTROL#_#T (%))
  | PackageT typ*                   hint(show PACKAGE#_#T %)
  | TableT id typ                   hint(show TABLE#_#T %)

syntax deftyp hint(show %latex("\\tau_\\texttt{def}")) =
  | aliastyp | datatyp | objtyp

;;
;; Synthesized type
;;

syntax synthtyp hint(show %latex("\\tau_\\texttt{synth}")) =
  | DefaultT                        hint(show DEFAULT#_#T)
  | SeqT typ*                       hint(show SEQ#_#T %)
  | SeqDefaultT typ*                hint(show SEQ#_#DEFAULT#_#T %)
  | RecordT (member, typ)*          hint(show RECORD#_#T %latex("\\{")#%#%latex("\\}"))
  | RecordDefaultT (member, typ)*   hint(show RECORD#_#DEFAULT#_#T %latex("\\{")#%#%latex("\\}"))
  | InvalidT                        hint(show INVALID#_#T)
  | SetT typ                        hint(show SET#_#T)
  | StateT                          hint(show STATE#_#T)
  | TableEnumT id member*           hint(show TABLE#_#ENUM#_#T % %latex("\\{")#%#%latex("\\}"))
  | TableStructT id (member, typ)*  hint(show TABLE#_#STRUCT#_#T % %latex("\\{")#%#%latex("\\}"))
  | AnyT                            hint(show ANY#_#T)

syntax typ hint(show %latex("\\tau")) =
  | basetyp | abstyp | deftyp | synthtyp

;;
;; Type Definition
;;

syntax monotypdef hint(show %latex("\\delta_\\texttt{mt}")) =
  MonoD typ           hint(show MONO#_#D %)
syntax polytypdef hint(show %latex("\\delta_\\texttt{pt}")) =
  PolyD tparam* typ   hint(show POLY#_#D % %)

syntax typdef hint(show %latex("\\delta")) =
  | monotypdef
  | polytypdef

var mtd : monotypdef    hint(show %latex("\\delta_\\texttt{mt}"))
var ptd : polytypdef    hint(show %latex("\\delta_\\texttt{pt}"))
var td : typdef         hint(show %latex("\\delta_\\texttt{t}"))

;;
;; Function Type
;;

syntax functyp hint(show %latex("\\tau_\\texttt{f}")) =
  | BuiltinMethodT paramtyp* typ          hint(show BUILTIN#_#METHOD#_#T (%) %latex("\\rightarrow") %)
  | ActionT paramtyp*                     hint(show ACTION#_#T (%))
  | ParserApplyMethodT paramtyp*          hint(show PARSER#_#APPLY#_#METHOD#_#T (%))
  | ControlApplyMethodT paramtyp*         hint(show CONTROL#_#APPLY#_#METHOD#_#T (%))
  | TableApplyMethodT typ                 hint(show TABLE#_#APPLY#_#METHOD#_#T %)
  | ExternFuncT paramtyp* typ             hint(show EXTERN#_#FUNCTION#_#T (%) %latex("\\rightarrow") %)
  | FuncT paramtyp* typ                   hint(show FUNCTION#_#T (%) %latex("\\rightarrow") %)
  | ExternMethodT paramtyp* typ           hint(show EXTERN#_#METHOD#_#T (%) %latex("\\rightarrow") %)
  | ExternAbstractMethodT paramtyp* typ   hint(show EXTERN#_#ABSTRACT#_#METHOD#_#T (%) %latex("\\rightarrow") %)

var ft : functyp   hint(show %latex("\\tau_\\texttt{f}"))

;;
;; Function Definition
;;

syntax monofuncdef hint(show %latex("\\delta_\\texttt{mf}")) =
  MonoFD functyp hint(show MONO#_#FD %)

syntax polyfuncdef hint(show %latex("\\delta_\\texttt{pf}")) =
  PolyFD tparam* functyp    hint(show POLY#_#FD % %latex("\\rightarrow") %)

syntax funcdef hint(show %latex("\\delta_\\texttt{f}")) =
  | monofuncdef
  | polyfuncdef

var mfd : monofuncdef   hint(show %latex("\\delta_\\texttt{mf}"))
var pfd : polyfuncdef   hint(show %latex("\\delta_\\texttt{pf}"))
var fd : funcdef        hint(show %latex("\\delta_\\texttt{f}"))

;;
;; Constructor Type
;;

syntax constyp hint(show %latex("\\tau_\\texttt{c}")) =
  ConsT paramtyp* typ  hint(show CONS#_#T (%) %latex("\\rightarrow") %)

var ct : constyp hint(show %latex("\\tau_\\texttt{c}"))

;;
;; Constructor Definition
;;

syntax consdef hint(show %latex("\\delta_\\texttt{c}")) =
  ConsD tparam* constyp hint(show CONS#_#D % %latex("\\rightarrow") %)

var cd : consdef hint(show %latex("\\delta_\\texttt{c}"))

;;
;; Runtime type
;;

syntax rtyp = typ dir ctk

;;
;; Environments
;;

syntax venv hint(show %latex("\\Sigma")) = map(id, val)
syntax tenv hint(show %latex("\\Gamma")) = map(id, rtyp)
syntax tdenv hint(show %latex("\\Delta_\\texttt{t}")) = map(tid, typdef)
syntax fdenv hint(show %latex("\\Delta_\\texttt{f}")) = map(fid, funcdef)
syntax cdenv hint(show %latex("\\Delta_\\texttt{c}")) = map(fid, consdef)

def $find_env(syntax K, syntax V, map(K, V), K) : V  hint(show %3#`[%4])

;;
;; Function/method overload resolution
;;

def $check_func_name(id, id) : bool   hint(show CHECK_FUNC_NAME(%1, %2))
def $check_func_name(id_f, id_f') = true
  -- if id_f = id_f'
def $check_func_name(id_f, id_f') = false
  -- otherwise

def $check_arity_more((id?)*, id*) : bool   hint(show CHECK_ARITY_MORE(%1, %2))
def $check_arity_more((id_a?)*, id_p*) = true
  -- if |(id_a?)*| > |id_p*|
def $check_arity_more((id_a?)*, id_p*) = false
  -- otherwise

def $check_arity((id?)*, id*) : bool    hint(show CHECK_ARITY(%1, %2))
def $check_arity((id_a?)*, id_p*) = true
  -- if |(id_a?)*| = |id_p*|
def $check_arity((id_a?)*, id_p*) = false
  -- otherwise

def $check_arity_less((id?)*, id*) : bool   hint(show CHECK_ARITY_LESS(%1, %2))
def $check_arity_less((id_a?)*, id_p*) = true
  -- if |(id_a?)*| < |id_p*|
def $check_arity_less((id_a?)*, id_p*) = false
  -- otherwise

def $get_params_missing_names(id*, id*) : id*   hint(show GET_PARAMS_MISSING_NAMES(%1, %2))
def $get_params_missing_names(id_ph id_pt*, id_a*) = id_ph $get_params_missing_names(id_pt*, id_a*)
  -- if ~$in_set(id, id_ph, SET id_a*)
def $get_params_missing_names(id_ph id_pt*, id_a*) = $get_params_missing_names(id_pt*, id_a*)
  -- otherwise


def $find_match_named(fid, funcdef, id*, (id, bool)*) : (fid, funcdef, id*)?    hint(show FIND_MATCH_NAMED(%1, %2, %3, %4))
def $find_match_named(fid, fd, id_a*, (id_p, deft_p)*) = t
  -- if $eq_set(id, SET id_a*, SET id_p*)
  -- if t = (fid, fd, eps)
def $find_match_named(fid, fd, id_a*, (id_p, deft_p)*) = eps
  -- otherwise


def $find_match_named_default(fid, funcdef, id*, (id,bool)*) : (fid, funcdef, id*)?   hint(show FIND_MATCH_NAMED_DEFAULT(%1, %2, %3, %4))
def $find_match_named_default(fid, fd, id_a*, (id_p, deft_p)*) = t
  -- if id_p'* = $get_params_missing_names(id_p*, id_a*)
  -- if $find_match_named(fid, fd, id_a* id_p'*, (id_p, deft_p)*) =/= eps
  -- if t = (fid, fd, id_p'*)
def $find_match_named_default(fid, fd, id_a*, (id_p, deft_p)*) = eps
  -- otherwise


def $find_match_unnamed_default(fid, funcdef, (id?)*, (id,bool)*) : (fid, funcdef, id*)?    hint(show FIND_MATCH_UNNAMED_DEFAULT(%1, %2, %3, %4))
def $find_match_unnamed_default(fid, fd, (id_a?)*, (id_p, deft_p)*) = t
  -- if (prm*, prm'*) = $partition((id,bool), (id_p, deft_p)*, |(id_a?)*|)
  -- if (prm' = (id_p', true))*
  -- if t = (fid, fd, id_p'*)
def $find_match_unnamed_default(fid, fd, (id_a?)*, (id_p, deft_p)*) = eps
  -- otherwise


def $find_matching_func(id, (id?)*, id*, fid, funcdef) : (fid, funcdef, id*)?   hint(show FIND_MATCHING_FUNC(%1, %2, %3, %4, %5))

def $find_matching_func(id_f, (id_a?)*, id_a'*, id_f' (id_p, deft_p)*, fd) = eps
  -- if ~$check_func_name(id_f, id_f')

def $find_matching_func(id_f, (id_a?)*, id_a'*, id_f' (id_p, deft_p)*, fd) = eps
  -- if $check_func_name(id_f, id_f')
  -- if $check_arity_more((id_a?)*, id_p*)

def $find_matching_func(id_f, (id_a?)*, id_a'*, id_f' (id_p, deft_p)*, fd) = $find_match_named(id_f' (id_p, deft_p)*, fd, id_a'*, (id_p, deft_p)*)
  -- if $check_func_name(id_f, id_f')
  -- if $check_arity((id_a?)*, id_p*)

def $find_matching_func(id_f, (id_a?)*, eps, id_f' (id_p, deft_p)*, fd) = t
  -- if $check_func_name(id_f, id_f')
  -- if $check_arity((id_a?)*, id_p*)
  -- if t = (id_f' (id_p, deft_p)*, fd, eps)

def $find_matching_func(id_f, (id_a?)*, id_a'*, id_f' (id_p, deft_p)*, fd) = $find_match_named_default(id_f' (id_p, deft_p)*, fd, id_a'*, (id_p, deft_p)*)
  -- if $check_func_name(id_f, id_f')
  -- if $check_arity_less((id_a?)*, id_p*)

def $find_matching_func(id_f, (id_a?)*, eps, id_f' (id_p, deft_p)*, fd) = $find_match_unnamed_default(id_f' (id_p, deft_p)*, fd, (id_a?)*, (id_p, deft_p)*)
  -- if $check_func_name(id_f, id_f')
  -- if $check_arity_less((id_a?)*, id_p*)


def $find_matching_funcs(id, (id?)*, id*, fid*, funcdef*) : (fid, funcdef, id*)*    hint(show FIND_MATCHING_FUNCS(%1, %2, %3, %4, %5))

def $find_matching_funcs(id_f, (id_a?)*, id_a'*, eps, eps) = eps
def $find_matching_funcs(id_f, (id_a?)*, id_a'*, fid_h fid_t*, funcdef_h funcdef_t*) = $find_matching_funcs(id_f, (id_a?)*, id_a'*, fid_t*, funcdef_t*)
  -- if $find_matching_func(id_f, (id_a?)*, id_a'*, fid_h, funcdef_h) = eps
def $find_matching_funcs(id_f, (id_a?)*, id_a'*, fid_h fid_t*, funcdef_h funcdef_t*) = t $find_matching_funcs(id_f, (id_a?)*, id_a'*, fid_t*, funcdef_t*)
  -- if (fid, fd, id_p*)? = $find_matching_func(id_f, (id_a?)*, id_a'*, fid_h, funcdef_h)
  -- if t = (fid, fd, id_p*)


def $find_func_opt(id, (id?)*, fdenv) : (fid, funcdef, id*)?      hint(show FIND_FUNC_OPT(%1, %2, %3))

def $find_func_opt(id_f, (id_a?)*, MAP fid* fd*) = eps
  -- if (id_a? = id_a')*
  -- if $find_matching_funcs(id_f, (id_a?)*, id_a'*, fid*, fd*) = eps

def $find_func_opt(id_f, (id_a?)*, MAP fid* fd*) = (fid', fd', id_p*)^1[0]
  -- if (id_a? = id_a')*
  -- if (fid', fd', id_p*)^1 = $find_matching_funcs(id_f, (id_a?)*, id_a'*, fid*, fd*)

def $find_func_opt(id_f, (id_a?)*, MAP fid* fd*) = eps
  -- if (id_a? = eps)*
  -- if $find_matching_funcs(id_f, (id_a?)*, eps, fid*, fd*) = eps

def $find_func_opt(id_f, (id_a?)*, MAP fid* fd*) = (fid', fd', id_p*)^1[0]
  -- if (id_a? = eps)*
  -- if (fid', fd', id_p*)^1 = $find_matching_funcs(id_f, (id_a?)*, eps, fid*, fd*)
