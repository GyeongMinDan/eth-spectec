;;
;; Nominal and structural types
;;

def $nominal(typ) : bool

def $nominal(SpecT ptd typ_a*) = $nominal(typ)
  -- if typ = $specialize_typdef(ptd, typ_a*)
def $nominal(DefT typ) = $nominal(typ)
def $nominal(NewT id typ) = true
def $nominal(EnumT id member*) = true
def $nominal(SEnumT id typ (member, val)*) = true
def $nominal(StructT id (member, typ)*) = true
def $nominal(HeaderT id (member, typ)*) = true
def $nominal(UnionT id (member, typ)*) = true
def $nominal(ExternT id fmap) = true
def $nominal(TableT typ) = true
def $nominal(typ) = false
  -- otherwise

;;
;; Alpha-equivalence of types
;;

relation Type_alpha: typ ~~ typ
relation FuncDef_alpha: funcdef ~~ funcdef
relation FuncType_alpha: functyp ~~ functyp

rule Type_alpha/basetyp:
  basetyp ~~ basetyp
  -- if basetyp = basetyp

rule Type_alpha/vart:
  (VarT id) ~~ (VarT id)

rule Type_alpha/spect-nominal:
  (SpecT ptd_a typ_a*) ~~ (SpecT ptd_b typ_b*)
  ----
  -- if typ_a' = $specialize_typdef(ptd_a, typ_a*)
  -- if typ_b' = $specialize_typdef(ptd_b, typ_b*)
  ----
  -- Type_alpha: typ_a' ~~ typ_b'
  ----
  -- if $nominal(typ_a') /\ $nominal(typ_b')
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/spect-structural:
  (SpecT ptd_a typ_a*) ~~ (SpecT ptd_b typ_b*)
  ----
  -- if typ_a' = $specialize_typdef(ptd_a, typ_a*)
  -- if typ_b' = $specialize_typdef(ptd_b, typ_b*)
  ----
  -- Type_alpha: typ_a' ~~ typ_b'
  ----
  -- if ~$nominal(typ_a') /\ ~$nominal(typ_b')

rule Type_alpha/deft-left:
  (DefT typ_a) ~~ typ_b
  -- Type_alpha: typ_a ~~ typ_b

rule Type_alpha/deft-right:
  typ_a ~~ (DefT typ_b)
  -- Type_alpha: typ_a ~~ typ_b

rule Type_alpha/newt:
  (NewT id_a typ_a) ~~ (NewT id_b typ_b)
  -- if id_a = id_b
  -- Type_alpha: typ_a ~~ typ_b

rule Type_alpha/enumt:
  (EnumT id_a member_a*) ~~ (EnumT id_b member_b*)
  -- if id_a = id_b
  -- if (member_a = member_b)*

rule Type_alpha/senumt:
  (SEnumT id_a typ_a (member_a, val_a)*) ~~ (SEnumT id_b typ_b (member_b, val_b)*)
  -- if id_a = id_b
  -- Type_alpha: typ_a ~~ typ_b
  -- if (member_a = member_b)*
  -- if (val_a = val_b)*

rule Type_alpha/listt:
  (ListT typ_a) ~~ (ListT typ_b)
  -- Type_alpha: typ_a ~~ typ_b

rule Type_alpha/tuplet:
  (TupleT typ_a*) ~~ (TupleT typ_b*)
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/stackt:
  (StackT typ_a size_a) ~~ (StackT typ_b size_b)
  -- Type_alpha: typ_a ~~ typ_b
  -- if size_a = size_b

rule Type_alpha/structt:
  (StructT id_a (member_a, typ_a)*) ~~ (StructT id_b (member_b, typ_b)*)
  -- if id_a = id_b
  -- if (member_a = member_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/headert:
  (HeaderT id_a (member_a, typ_a)*) ~~ (HeaderT id_b (member_b, typ_b)*)
  -- if id_a = id_b
  -- if (member_a = member_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/uniont:
  (UnionT id_a (member_a, typ_a)*) ~~ (UnionT id_b (member_b, typ_b)*)
  -- if id_a = id_b
  -- if (member_a = member_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/externt:
  (ExternT id_a fmap_a) ~~ (ExternT id_b fmap_b)
  -- if id_a = id_b
  ----
  -- if MAP fid_a* funcdef_a* = fmap_a
  -- if MAP fid_b* funcdef_b* = fmap_b
  ----
  -- if $eq_set(fid, SET fid_a*, SET fid_b*)
  -- (FuncDef_alpha: $find_map(fid, funcdef, fmap_a, fid_a) ~~ $find_map(fid, funcdef, fmap_b, fid_a))*

rule Type_alpha/parsert:
  (ParserT paramtyp_a*) ~~ (ParserT paramtyp_b*)
  -- if (id_a dir_a typ_a val_a = paramtyp_a)*
  -- if (id_b dir_b typ_b val_b = paramtyp_b)*
  ----
  -- if (dir_a = dir_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/controlt:
  (ControlT paramtyp_a*) ~~ (ControlT paramtyp_b*)
  -- if (id_a dir_a typ_a val_a = paramtyp_a)*
  -- if (id_b dir_b typ_b val_b = paramtyp_b)*
  ----
  -- if (dir_a = dir_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/packaget:
  (PackageT typ_a*) ~~ (PackageT typ_b*)
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/tablet:
  (TableT typ_a) ~~ (TableT typ_b)
  -- Type_alpha: typ_a ~~ typ_b

rule Type_alpha/defaultt:
  DefaultT ~~ DefaultT

rule Type_alpha/seqt:
  (SeqT typ_a*) ~~ (SeqT typ_b*)
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/seqdefaultt:
  (SeqDefaultT typ_a*) ~~ (SeqDefaultT typ_b*)
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/recordt:
  (RecordT (member_a, typ_a)*) ~~ (RecordT (member_b, typ_b)*)
  -- if (member_a = member_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/recorddefaultt:
  (RecordDefaultT (member_a, typ_a)*) ~~ (RecordDefaultT (member_b, typ_b)*)
  -- if (member_a = member_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/invalidt:
  InvalidT ~~ InvalidT

rule Type_alpha/sett:
  (SetT typ_a) ~~ (SetT typ_b)
  -- Type_alpha: typ_a ~~ typ_b

rule Type_alpha/statet:
  StateT ~~ StateT

rule Type_alpha/tableenumt:
  (TableEnumT id_a member_a*) ~~ (TableEnumT id_b member_b*)
  -- if id_a = id_b
  -- if (member_a = member_b)*

rule Type_alpha/tablestructt:
  (TableStructT id_a (member_a, typ_a)*) ~~ (TableStructT id_b (member_b, typ_b)*)
  -- if id_a = id_b
  -- if (member_a = member_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*

rule Type_alpha/anyt:
  AnyT ~~ AnyT

rule FuncDef_alpha/monofd:
  (MonoFD ft_a) ~~ (MonoFD ft_b)
  -- FuncType_alpha: ft_a ~~ ft_b

rule FuncDef_alpha/polyfd:
  (PolyFD tparam_a* ft_a) ~~ (PolyFD tparam_b* ft_b)
  -- if |tparam_a*| = |tparam_b*|
  ----
  -- if ft_a' = $subst_functyp(MAP tparam_a* (VarT $fresh_tid())*, ft_a)
  ----
  -- if ft_b' = $subst_functyp(MAP tparam_b* (VarT $fresh_tid())*, ft_b)
  ----
  -- FuncType_alpha: ft_a' ~~ ft_b'

rule FuncType_alpha/builtinmethodt:
  (BuiltinMethodT paramtyp_a* typ_r_a) ~~ (BuiltinMethodT paramtyp_b* typ_r_b)
  -- if (id_a dir_a typ_a val_a = paramtyp_a)*
  -- if (id_b dir_b typ_b val_b = paramtyp_b)*
  ----
  -- (if dir_a = dir_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*
  -- (Type_alpha: typ_r_a ~~ typ_r_b)

rule FuncType_alpha/actiont:
  (ActionT paramtyp_a*) ~~ (ActionT paramtyp_b*)
  -- if (id_a dir_a typ_a val_a = paramtyp_a)*
  -- if (id_b dir_b typ_b val_b = paramtyp_b)*
  ----
  -- (if dir_a = dir_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*

rule FuncType_alpha/parserapplymethodt:
  (ParserApplyMethodT paramtyp_a*) ~~ (ParserApplyMethodT paramtyp_b*)
  -- if (id_a dir_a typ_a val_a = paramtyp_a)*
  -- if (id_b dir_b typ_b val_b = paramtyp_b)*
  ----
  -- (if dir_a = dir_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*

rule FuncType_alpha/controlapplymethodt:
  (ControlApplyMethodT paramtyp_a*) ~~ (ControlApplyMethodT paramtyp_b*)
  -- if (id_a dir_a typ_a val_a = paramtyp_a)*
  -- if (id_b dir_b typ_b val_b = paramtyp_b)*
  ----
  -- (if dir_a = dir_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*

rule FuncType_alpha/tableapplymethodt:
  (TableApplyMethodT typ_a) ~~ (TableApplyMethodT typ_b)
  -- (Type_alpha: typ_a ~~ typ_b)

rule FuncType_alpha/externfunctiont:
  (ExternFuncT paramtyp_a* typ_r_a) ~~ (ExternFuncT paramtyp_b* typ_r_b)
  -- if (id_a dir_a typ_a val_a = paramtyp_a)*
  -- if (id_b dir_b typ_b val_b = paramtyp_b)*
  ----
  -- (if dir_a = dir_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*
  -- (Type_alpha: typ_r_a ~~ typ_r_b)

rule FuncType_alpha/functiont:
  (FuncT paramtyp_a* typ_r_a) ~~ (FuncT paramtyp_b* typ_r_b)
  -- if (id_a dir_a typ_a val_a = paramtyp_a)*
  -- if (id_b dir_b typ_b val_b = paramtyp_b)*
  ----
  -- (if dir_a = dir_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*
  -- (Type_alpha: typ_r_a ~~ typ_r_b)

rule FuncType_alpha/externmethodt:
  (ExternMethodT paramtyp_a* typ_r_a) ~~ (ExternMethodT paramtyp_b* typ_r_b)
  -- if (id_a dir_a typ_a val_a = paramtyp_a)*
  -- if (id_b dir_b typ_b val_b = paramtyp_b)*
  ----
  -- (if dir_a = dir_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*
  -- (Type_alpha: typ_r_a ~~ typ_r_b)

rule FuncType_alpha/externabstractmethodt:
  (ExternAbstractMethodT paramtyp_a* typ_r_a) ~~
  (ExternAbstractMethodT paramtyp_b* typ_r_b)
  -- if (id_a dir_a typ_a val_a = paramtyp_a)*
  -- if (id_b dir_b typ_b val_b = paramtyp_b)*
  ----
  -- (if dir_a = dir_b)*
  -- (Type_alpha: typ_a ~~ typ_b)*
  -- (Type_alpha: typ_r_a ~~ typ_r_b)
