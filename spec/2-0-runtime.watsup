syntax set(syntax K) = K*
syntax map(syntax K, syntax V) = (K, V)*


;; Visibility sets for type, value, and functions

syntax tdvis = set(id)
syntax vvis = set(id)
syntax fvis = set(id)
syntax vis = tdvis vvis fvis

var VIS : vis


;; Runtime type, value, and function

;; Runtime Type

syntax rtype =
  | RT_BOOL                       hint(show TBOOL)
  | RT_AINT                       hint(show TINT)
  | RT_INT num                    hint(show TINT%)
  | RT_BIT num                    hint(show TBIT%)
  | RT_VBIT num                   hint(show TVARBIT%)
  | RT_STR                        hint(show TSTR)
  | RT_ERR field*                 hint(show TERR %)
  | RT_MATCHKIND field*           hint(show TMATCHKIND %)
  | RT_NAME str                   hint(show TVAR %)
  | RT_NEW str                    hint(show TNEW %)
  | RT_STACK rtype num            hint(show TSTACK %`[%])
  | RT_TUPLE rtype*               hint(show TTUPLE %)
  | RT_STRUCT (field, rtype)*     hint(show TSTRUCT %)
  | RT_HEADER (field, rtype)*     hint(show THEADER %)
  | RT_UNION (field, rtype)*      hint(show TUNION %)
  | RT_ENUM field*                hint(show TENUM %)
  | RT_REF                        hint(show TREF %)

;; Value

syntax val =
  | V_BOOL boolean                hint(show VBOOL %)
  | V_AINT num                    hint(show VINT %)
  | V_INT num num                 hint(show VINT% %)
  | V_BIT num num                 hint(show VARBIT% %)
  | V_VBIT num num                hint(show VVBIT% %)
  | V_STR str                     hint(show VSTR %)
  | V_ERR str                     hint(show VERR %)
  | V_STACK val* num num          hint(show VSTACK % % %)
  | V_TUPLE val*                  hint(show VTUPLE %)
  | V_STRUCT (str, val)*          hint(show VSTRUCT %)
  | V_HEADER boolean (str, val)*  hint(show VHEADER % %)
  | V_UNION (str, val)*           hint(show VUNION %)
  | V_ENUMFIELD str               hint(show VENUMFIELD %)
  | V_SENUMFIELD str val          hint(show VSENUMFIELD % %)
  | V_REF str*                    hint(show VREF %)

def $find_field((str, val)*, str) : val
def $write_field((str, val)*, str, val) : (str, val)* 

;; Function

syntax func =
  | F_FUNC vis tparam* param* type block      hint(show FFUNC % % % % %)
  | F_EXTERN vis tparam* param*               hint(show FEXTERN % % %)
  | F_METHOD vis tparam* param* block         hint(show FMETHOD % % % %)
  | F_EXTERNMETHOD vis tparam* param*         hint(show FEXTERNMETHOD % % %)
  | F_STATE block                             hint(show FSTATE %)
  | F_ACTION vis param* block                 hint(show FACTION % % %)
  | F_TABLE vis                               hint(show FTABLE)


;; Environments for runtime type, value, and functions

syntax tdenv = map(id, rtype)
syntax venv = map(id, val)
syntax fenv = map(id, func)
syntax env = tdenv venv fenv

var ENV : env

def $env_to_vis(env) : vis


;; Object Constructor Closure

syntax cclos =
  | CC_PARSER tparam* param* param* decl* state*      hint(show CCPARSER)
  | CC_CONTROL tparam* param* param* decl* block      hint(show CCCONTROL)
  | CC_PACKAGE tparam* param*                         hint(show CCPACKAGE)
  | CC_EXTERN tparam* param* decl*                    hint(show CCEXTERN)

;; Environment for Constructor Closures

syntax ccenv = map(id, cclos)

var CCE : ccenv

def $add_cclos(ccenv, id, cclos) : ccenv

def $find_cclos(ccenv, id) : cclos


;; Object

syntax obj =
  | O_VALUESET                                          hint(show OVALUESET)
  | O_TABLE key* action* entry* default? custom* func   hint(show OTABLE % % % % % %)
  | O_EXTERN vis env                                    hint(show OEXTERN % %)
  | O_PARSER vis env func                               hint(show OPARSER % % %)
  | O_CONTROL vis env func                              hint(show OCONTROL % % %)
  | O_PACKAGE                                           hint(show OPACKAGE)

;; Store for Objects

syntax sto = map(path, obj)

var S : sto

def $add_obj(sto, path, obj) : sto

def $find_obj(sto, path) : obj


;; Signal

syntax sig = | CONT | RET val? | EXIT
