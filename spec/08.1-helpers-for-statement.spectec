syntax enumerated_<X> = (nat, X)
dec $enumerate_<X>(X*) : enumerated_<X>*

dec $filter_list_<X>(X*, def $cond(X) : bool)
  : X*
def $filter_list_<X>(eps, def $cond) = eps
def $filter_list_<X>(X_h :: X_t*, def $cond)
  = X_h :: $filter_list_<X>(X_t*, def $cond)
  -- if $cond(X_h) = true
def $filter_list_<X>(X_h :: X_t*, def $cond)
  = $filter_list_<X>(X_t*, def $cond)
  -- if $cond(X_h) = false

dec $filter_list_2_<X, Y>(X*, Y, def $cond(X, Y) : bool)
  : X*


dec $is_active_validator_enumerated(enumerated_<validator>, epoch) : bool
def $is_active_validator_enumerated((n, validator), epoch) = $is_active_validator(validator, epoch)

dec $get_active_validator_indices(beaconState, epoch) : validatorIndex*
def $get_active_validator_indices(state, epoch) = n_active*
  -- if state.VALIDATORS = validator*
  -- if $enumerate_<validator>(validator*) = (n, validator)*
  -- if $filter_list_2_<(nat, validator), epoch>(
      (n, validator)*,
      epoch,
      def $is_active_validator_enumerated
    )
    = (n_active, validator_active)*