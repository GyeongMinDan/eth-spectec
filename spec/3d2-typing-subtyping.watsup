;;
;; Explicit Casts
;;

rule Sub_expl/canon:
  typ <: typ'
  -- Sub_expl: $canon_typ(typ) <: $canon_typ(typ')

rule Sub_expl/eq:
  typ <: typ'
  -- Type_alpha: typ ~~ typ'

rule Sub_expl/fbitt-boolt:
  FBitT 1 <: BoolT

rule Sub_expl/boolt-fbitt:
  BoolT <: FBitT 1

rule Sub_expl/intt-boolt:
  IntT <: BoolT

rule Sub_expl/fintt-fbitt:
  FIntT i <: FBitT i

rule Sub_expl/fbitt-fintt:
  FBitT i <: FIntT i

rule Sub_expl/fbitt-fbitt:
  FBitT i <: FBitT j

rule Sub_expl/fintt-fintt:
  FIntT i <: FIntT j

rule Sub_expl/fbitt-intt:
  FBitT i <: IntT

rule Sub_expl/fintt-intt:
  FIntT i <: IntT

rule Sub_expl/intt-fbitt:
  IntT <: FBitT i

rule Sub_expl/intt-fintt:
  IntT <: FIntT i

rule Sub_expl/newt-innert:
  NewT id typ' <: typ
  -- Sub_impl: typ' << typ

rule Sub_expl/innert-newt:
  typ <: NewT id typ'
  -- Sub_impl: typ << typ'

rule Sub_expl/senumt-innert:
  SEnumT id typ' fields <: typ
  -- Sub_impl: typ' << typ

rule Sub_expl/innert-senumt:
  typ <: SEnumT id typ' fields
  -- Sub_impl: typ << typ'

rule Sub_expl/seqt-list:
  SeqT typ'* <: ListT typ''
  -- (Sub_expl: typ' <: typ'')*

rule Sub_expl/seqt-tuplet:
  SeqT typ'* <: TupleT typ''*
  -- (Sub_expl: typ' <: typ'')*

rule Sub_expl/seqt-stackt:
  SeqT typ'* <: StackT typ'' i
  -- (Sub_expl: typ' <: typ'')*
  -- if |typ'*| <= i

rule Sub_expl/seqt-structt:
  SeqT typ'* <: StructT id (member, typ'')*
  -- (Sub_expl: typ' <: typ'')*

rule Sub_expl/seqt-headert:
  SeqT typ'* <: HeaderT id (member, typ'')*
  -- (Sub_expl: typ' <: typ'')*

rule Sub_expl/recordt-structt:
  RecordT (member', typ')* <: StructT id (member'', typ'')*
  -- if $eq_set(member, SET member'*, SET member''*)
  ----
  -- (Sub_expl: $find_map(member, typ, MAP member'* typ'*, member') <: $find_map(member, typ, MAP member''* typ''*, member''))*

rule Sub_expl/recordt-headert:
  RecordT (member', typ')* <: HeaderT id (member'', typ'')*
  -- if $eq_set(member, SET member'*, SET member''*)
  ----
  -- (Sub_expl: $find_map(member, typ, MAP member'* typ'*, member') <: $find_map(member, typ, MAP member''* typ''*, member''))*

rule Sub_expl/defaultt:
  DefaultT <: typ
  -- if $is_deftable(typ)

rule Sub_expl/seqdefaultt-tuplet:
  SeqDefaultT typ'* <: TupleT typ''*
  -- if |typ'*| < |typ''*|
  -- if (typ'''*, typ''''*) = $partition(typ, typ''*, |typ'*|)
  ----
  -- (Sub_expl: typ' <: typ'''')*
  -- if ($is_deftable(typ'''))*

rule Sub_expl/seqdefaultt-stackt:
  SeqDefaultT typ'* <: StackT typ'' i
  -- if |typ'*| < i
  -- (Sub_expl: typ' <: typ'')*
  -- if $is_deftable(typ'')

rule Sub_expl/seqdefaultt-structt:
  SeqDefaultT typ'* <: StructT id (member, typ'')*
  -- if |typ'*| < |typ''*|
  -- if (typ'''*, typ''''*) = $partition(typ, typ''*, |typ'*|)
  ----
  -- (Sub_expl: typ' <: typ'''')*
  -- if ($is_deftable(typ'''))*

rule Sub_expl/seqdefaultt-headert:
  SeqDefaultT typ'* <: HeaderT id (member, typ'')*
  -- if |typ'*| < |typ''*|
  -- if (typ'''*, typ''''*) = $partition(typ, typ''*, |typ'*|)
  ----
  -- (Sub_expl: typ' <: typ'''')*
  -- if ($is_deftable(typ'''))*

rule Sub_expl/recorddefaultt-structt:
  RecordDefaultT (member', typ')* <: StructT id (member'', typ'')*
  -- if members_from = $to_set(member, member'*)
  -- if members_to = $to_set(member, member''*)
  ----
  -- if $is_subset(member, members_from, members_to)
  -- if SET member'''* = $diff_set(member, members_to, members_from)
  ----
  -- (Sub_expl: $assoc(member, typ, member', (member', typ')*) <: $assoc(member, typ, member', (member'', typ'')*))*
  ----
  -- if ($is_deftable($assoc(member, typ, member''', (member'', typ'')*)))*

rule Sub_expl/recorddefaultt-headert:
  RecordDefaultT (member', typ')* <: HeaderT id (member, typ'')*
  -- if members_from = $to_set(member, member'*)
  -- if members_to = $to_set(member, member''*)
  ----
  -- if $is_subset(member, members_from, members_to)
  -- if SET member'''* = $diff_set(member, members_to, members_from)
  ----
  -- (Sub_expl: $assoc(member, typ, member', (member', typ')*) <: $assoc(member, typ, member', (member'', typ'')*))*
  ----
  -- if ($is_deftable($assoc(member, typ, member''', (member'', typ'')*)))*


rule Sub_expl/invalidt-headert:
  InvalidT <: HeaderT id fields

rule Sub_expl/invalidt-uniont:
  InvalidT <: UnionT id fields


;;
;; Implicit Casts
;;

rule Sub_impl/canon:
  typ << typ'
  -- Sub_impl: $canon_typ(typ) << $canon_typ(typ')

rule Sub_impl/eq:
  typ << typ'
  -- Type_alpha: typ ~~ typ'

rule Sub_impl/intt-fbitt:
  IntT << FBitT i

rule Sub_impl/intt-fintt:
  IntT << FIntT i

rule Sub_impl/senumt-innert:
  SEnumT id typ' fields << typ
  -- Sub_impl: typ' << typ

rule Sub_impl/innert-senumt:
  typ << SEnumT id typ' fields
  -- Sub_impl: typ << typ'

rule Sub_impl/seqt-list:
  SeqT typ'* << ListT typ''
  -- (Sub_impl: typ' << typ'')*

rule Sub_impl/seqt-tuplet:
  SeqT typ'* << TupleT typ''*
  -- (Sub_impl: typ' << typ'')*

rule Sub_impl/seqt-stackt:
  SeqT typ'* << StackT typ'' i
  -- (Sub_impl: typ' << typ'')*
  -- if |typ'*| <= i

;; (TODO) Fill in the rule.
;; (typing/subtyp.ml)
;; rule Sub_impl/recordt-structt:

;; (TODO) Fill in the rule.
;; (typing/subtyp.ml)
;; rule Sub_impl/recordt-headert:

;; (TODO) Fill in the rule.
;; (typing/subtyp.ml)
;; rule Sub_impl/defaultt:

;; (TODO) Fill in the rule.
;; (typing/subtyp.ml)
;; rule Sub_impl/seqdefaultt-tuplet:

;; (TODO) Fill in the rule.
;; (typing/subtyp.ml)
;; rule Sub_impl/seqdefaultt-stackt:

;; (TODO) Fill in the rule.
;; (typing/subtyp.ml)
;; rule Sub_impl/seqdefaultt-structt:

;; (TODO) Fill in the rule.
;; (typing/subtyp.ml)
;; rule Sub_impl/seqdefaultt-headert:

;; (TODO) Fill in the rule.
;; (typing/subtyp.ml)
;; rule Sub_impl/recorddefaultt-structt:

;; (TODO) Fill in the rule.
;; (typing/subtyp.ml)
;; rule Sub_impl/recorddefaultt-headert:

rule Sub_impl/invalidt-headert:
   InvalidT << HeaderT id fields

rule Sub_impl/invalidt-uniont:
  InvalidT << UnionT id fields
