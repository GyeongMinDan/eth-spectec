;;
;; Calling convention
;;

rule Call_convention_ok/in:
  p C actctxt |- (id IN typ_p val?) ~~ (exprIL, typ_a) : exprIL'
  -- if exprIL' = $coerce_assign((exprIL, typ_a), typ_p)

rule Call_convention_ok/out-inout:
  p C actctxt |- (id dir typ_p val?) ~~ (exprIL, typ_a) : exprIL
  -- if dir = OUT \/ dir = INOUT
  -- Type_alpha: typ_a ~~ typ_p
  -- Lval_ok: p C |- exprIL

rule Call_convention_ok/no-action:
  p C ACT |- (id NO typ_p val?) ~~ (exprIL, typ_a) : exprIL'
  -- if exprIL' = $coerce_assign((exprIL, typ_a), typ_p)

rule Call_convention_ok/no-not-action:
  p C NOACT |- (id NO typ val?) ~~ (exprIL, typ') : exprIL
  -- Type_alpha: typ' ~~ typ
  -- Expr_ok: p C |- expr : exprIL typ'' ctk
  -- if ctk = CTK \/ ctk = LCTK


rule Call_convention_arg_ok/expra:
  p C actctxt |- pt ~~ (ExprA exprIL, typ) : ExprA exprIL'
  -- Call_convention_ok: p C actctxt |- pt ~~ (exprIL, typ) : exprIL'

rule Call_convention_arg_ok/some-namea:
  p C actctxt |- pt ~~ (NameA id exprIL, typ) : NameA id exprIL'
  -- Call_convention_ok: p C actctxt |- pt ~~ (exprIL, typ) : exprIL'

rule Call_convention_arg_ok/none-namea-anya:
  p C actctxt |- (id OUT typ val?) ~~ (argIL, typ) : argIL
  -- if argIL = (NameA id' eps) \/ argIL = AnyA

;;
;; Function typing
;; (TODO-Jaehyun) should consider fresh type identifier insertion
;;

rule FuncType_ok:
   p C |- name targIL* argIL* : functyp eps id_deft*
   -- if (fid, funcdef, id_deft*) = $find_funcdef(GLOBAL, C, name, argIL*)
   -- if functyp = $specialize_funcdef(funcdef, targIL*)

;;
;; Method typing
;; (TODO-Jaehyun) should consider fresh type identifier insertion
;;

;; (TODO-Jaehyun) check that builtin is defined on typ_b
rule MethodType_ok/builtin-size:
  p C |- expr_b member eps eps : (BuiltinMethodT eps IntT) exprIL_b eps eps eps
  -- Expr_ok: p C |- expr_b : exprIL_b typ_b ctk_b
  ----
  -- if $in_set(member, member, SET "minSizeInBits" "minSizeInBytes" "maxSizeInBits" "maxSizeInBytes")

rule MethodType_ok/builtin-stackt:
  p C |- expr_b member eps argIL* : (BuiltinMethodT paramtyp IntT) exprIL_b eps eps
  -- if member = "push\\_front" \/ member = "pop\\_back"
  ----
  -- Expr_ok: p C |- expr_b: exprIL_b typ_b ctk_b
  -- if StackT typ_b_in size_b = $canon_typ(typ_b)
  ----
  -- if paramtyp = "count" NO IntT eps

rule MethodType_ok/builtin-headert-isvalid:
  p C |- expr_b "isValid" eps argIL* : (BuiltinMethodT eps BoolT) exprIL_b eps eps
  ----
  -- Expr_ok: p C |- expr_b: exprIL_b typ_b ctk_b
  -- if HeaderT id_b (member, typ_b_in)* = $canon_typ(typ_b)

rule MethodType_ok/builtin-headert-setvalid-invalid:
  p C |- expr_b member eps argIL* : (BuiltinMethodT eps VoidT) exprIL_b eps eps
  -- if member = "setValid" \/ member = "setInvalid"
  ----
  -- Expr_ok: p C |- expr_b: exprIL_b typ_b ctk_b
  -- if HeaderT id_b (member, typ_b_in)* = $canon_typ(typ_b)

rule MethodType_ok/builtin-uniont:
  p C |- expr_b "isValid" eps argIL* : (BuiltinMethodT eps BoolT) exprIL_b eps eps
  ----
  -- Expr_ok: p C |- expr_b: exprIL_b typ_b ctk_b
  -- if UnionT id_b (member, typ_b_in)* = $canon_typ(typ_b)

rule MethodType_ok/externt:
  p C |- expr_b member targIL* argIL* : functyp exprIL_b eps id_deft*
  ----
  -- Expr_ok: p C |- expr_b: exprIL_b typ_b ctk_b
  -- if ExternT id_b fmap_b = $canon_typ(typ_b)
  ----
  -- if (fid, funcdef, id_deft*) = $find_func(funcdef, member, $to_fkey(argIL*), fmap_b)
  -- if functyp = $specialize_funcdef(funcdef, targIL*)

rule MethodType_ok/parsert:
  p C |- expr_b "apply" eps argIL* : functyp' exprIL_b eps
  ----
  -- Expr_ok: p C |- expr_b: exprIL_b typ_b ctk_b
  -- if ParserT paramtyp* = $canon_typ(typ_b)
  ----
  -- if functyp = ParserApplyMethodT paramtyp*
  -- if funcdef = MonoFD functyp
  ----
  -- if (fid, fd, id_deft*) = $find_func(funcdef, "apply", $to_fkey(argIL*), MAP (PAIR "apply" funcdef)^1)
  -- if MonoFD functyp' = fd

rule MethodType_ok/controlt:
  p C |- expr_b "apply" eps argIL* : functyp' exprIL_b eps
  ----
  -- Expr_ok: p C |- expr_b: exprIL_b typ_b ctk_b
  -- if ControlT paramtyp* = $canon_typ(typ_b)
  ----
  -- if functyp = ControlApplyMethodT paramtyp*
  -- if funcdef = MonoFD functyp
  ----
  -- if (fid, fd, id_deft*) = $find_func(funcdef, "apply", $to_fkey(argIL*), MAP (PAIR "apply" funcdef)^1)
  -- if MonoFD functyp' = fd

rule MethodType_ok/tablet:
  p C |- expr_b "apply" eps eps : functyp exprIL_b eps
  ----
  -- Expr_ok: p C |- expr_b: exprIL_b typ_b ctk_b
  -- if TableT id typ_t = $canon_typ(typ_b)
  ----
  -- if functyp = TableApplyMethodT typ_t

;;
;; Helpers for invocation
;;

;; Filter out default arguments, leaving only the required ones

def $filter_default_args(paramtyp*, id*) : paramtyp* hint(show FILTER_DEFAULT_ARGS%latex("(")#%1#%latex(", ")#%2#%latex(")"))

def $filter_default_args(eps, id_deft*) = eps
def $filter_default_args(paramtyp_h paramtyp_t*, id_deft*) = $filter_default_args(paramtyp_t*, id_deft*)
  -- if id_p dir_p typ_p val_p? = paramtyp_h
  -- if id_p <- id_deft*
def $filter_default_args(paramtyp_h paramtyp_t*, id_deft*) = paramtyp_h $filter_default_args(paramtyp_t*, id_deft*)
  -- otherwise

;; If arguments are named, align parameters along with the arguments

syntax pmap = map(id, paramtyp)

def $align_params_with_args(paramtyp*, (argIL, typ)*): (paramtyp*, (argIL, typ)*) hint(show ALIGN_PARAMS_WITH_ARGS%latex("(")#%1#%latex(", ")#%2#%latex(")"))
def $align_params_with_args'(pmap, paramtyp, argIL, typ): (paramtyp, argIL, typ)  hint(show ALIGN_PARAMS_WITH_ARGS'%latex("(")#%1#%latex(", ")#%2#%latex(")"))

def $align_params_with_args(paramtyp*, (argIL, typ)*) = (paramtyp'*, (argIL', typ')*)
  -- if (id dir typ val?)* = paramtyp*
  -- if pmap = MAP (PAIR id paramtyp)*
  -- (if (paramtyp', argIL', typ') = $align_params_with_args'(pmap, paramtyp, argIL, typ))*

def $align_params_with_args'(pmap, paramtyp, ExprA exprIL, typ) = (paramtyp, ExprA exprIL, typ)
def $align_params_with_args'(pmap, paramtyp, NameA id exprIL?, typ) = (paramtyp', NameA id exprIL?, typ)
  -- if paramtyp' = $find_map(id, paramtyp, pmap, id)
def $align_params_with_args'(pmap, paramtyp, AnyA, typ) = (paramtyp, AnyA, typ)

;;
;; Type inference
;;

def $empty_cstr(tid*) : map(tid, typ?)                                                      hint(show EMPTY_CSTR(%1))
def $gen_cstr(map(tid, typ?), typ, typ) : map(tid, typ?)                                    hint(show GEN_CSTR(%1, %2, %3))
def $gen_cstrs(map(tid, typ?), typ*, typ*) : map(tid, typ?)                                 hint(show GEN_CSTRS(%1, %2, %3))
def $gen_cstr_fd(map(tid, typ?), funcdef, funcdef) : map(tid, typ?)                         hint(show GEN_CSTR_FD(%1, %2, %3))
def $gen_cstr_fd'(map(tid, typ?), fid*, fdenv, fdenv) : map(tid, typ?)                      hint(show GEN_CSTR_FD'(%1, %2, %3, %4))
def $merge_cstr(map(tid, typ?), map(tid, typ?)) : map(tid, typ?)                            hint(show MERGE_CSTR(%1, %2))
def $merge_cstr'(map(tid, typ?), map(tid, typ?), tid*, map(tid, typ?)) : map(tid, typ?)     hint(show MERGE_CSTR'(%1, %2, %3, %4))
def $merge_cstrs(map(tid, typ?), map(tid, typ?)*) : map(tid, typ?)                          hint(show MERGE_CSTRS(%1, %2))
def $resolve_cstrs(map(tid, typ?)) : map(tid, typ)                                          hint(show RESOLVE_CSTRS(%1))
def $infer_targs(tid*, paramtyp*, typ*) : map(tid, typ)                                     hint(show INFER_TARGS(%1, %2, %3))

def $empty_cstr(eps) = MAP eps eps
def $empty_cstr(tid_h tid_t*) = cstr'
  -- if cstr = $empty_cstr(tid_t*)
  -- if cstr' = $update_map(tid, typ?, cstr, tid_h, eps)


def $gen_cstr_fd(cstr, fd_p, fd_a) = cstr''
  -- if (id_p dir_p typ_p val_p?)* = $get_params_funcdef(fd_p)
  -- if (id_a dir_a typ_a val_a?)* = $get_params_funcdef(fd_a)
  -- if cstr' = $gen_cstrs(cstr, typ_p*, typ_a*)
  -- if cstr'' = $gen_cstr(cstr', $get_typ_ret_funcdef(fd_p), $get_typ_ret_funcdef(fd_a))

def $gen_cstr_fd'(cstr, eps, fdenv_p, fdenv_a) = cstr
def $gen_cstr_fd'(cstr, fid_h fid_t*, fdenv_p, fdenv_a) = $gen_cstr_fd'(cstr', fid_t*, fdenv_p, fdenv_a)
  -- if fd_p = $find_env(fid, funcdef, fdenv_p, fid_h)
  -- if fd_a = $find_env(fid, funcdef, fdenv_a, fid_h)
  -- if cstr' = $gen_cstr_fd(cstr, fd_p, fd_a)


def $gen_cstr(cstr, VarT tid, typ_a) = $update_map(tid, typ?, cstr, tid, typ_a)
  -- if $in_dom_map(tid, typ?, tid, cstr)
def $gen_cstr(cstr, SpecT ptd_p typ_p'*, SpecT ptd_a typ_a'*) = $gen_cstrs(cstr', typ_p'*, typ_a'*)
  -- if typ_p'' = $specialize_typdef(ptd_p, typ_p'*)
  -- if typ_a'' = $specialize_typdef(ptd_a, typ_a'*)
  -- if cstr' = $gen_cstr(cstr, typ_p'', typ_a'')
  -- if $nominal(typ_p'') /\ $nominal(typ_a'')
def $gen_cstr(cstr, SpecT ptd_p typ_p'*, SpecT ptd_a typ_a'*) = cstr'
  -- if typ_p'' = $specialize_typdef(ptd_p, typ_p'*)
  -- if typ_a'' = $specialize_typdef(ptd_a, typ_a'*)
  -- if cstr' = $gen_cstr(cstr, typ_p'', typ_a'')
  -- if ~($nominal(typ_p'') /\ $nominal(typ_a''))
def $gen_cstr(cstr, DefT typ_p', typ_a) = $gen_cstr(cstr, typ_p', typ_a)
def $gen_cstr(cstr, typ_p, DefT typ_a') = $gen_cstr(cstr, typ_p, typ_a')
def $gen_cstr(cstr, NewT id_p typ_p', NewT id_a typ_a') = $gen_cstr(cstr, typ_p', typ_a')
  -- if id_p = id_a
def $gen_cstr(cstr, ListT typ_p, ListT typ_a) = $gen_cstr(cstr, typ_p, typ_a)
def $gen_cstr(cstr, TupleT typ_p*, TupleT typ_a*) = $gen_cstrs(cstr, typ_p*, typ_a*)
def $gen_cstr(cstr, StackT typ_p' size_p, StackT typ_a' size_a) = $gen_cstr(cstr, typ_p', typ_a')
  -- if size_p = size_a
def $gen_cstr(cstr, StructT id_p (member_p, typ_p')*, StructT id_a (member_a, typ_a')*) = $gen_cstrs(cstr, typ_p'*, typ_a'*)
  -- if id_p = id_a
def $gen_cstr(cstr, HeaderT id_p (member_p, typ_p')*, HeaderT id_a (member_a, typ_a')*) = $gen_cstrs(cstr, typ_p'*, typ_a'*)
  -- if id_p = id_a
def $gen_cstr(cstr, UnionT id_p (member_p, typ_p')*, UnionT id_a (member_a, typ_a')*) = $gen_cstrs(cstr, typ_p'*, typ_a'*)
  -- if id_p = id_a
def $gen_cstr(cstr, ExternT id_p fdenv_p, ExternT id_a fdenv_a) = $gen_cstr_fd'(cstr, fid_p*, fdenv_p, fdenv_a)
  -- if MAP (PAIR fid_p fd_p)* = fdenv_p
  -- if MAP (PAIR fid_a fd_a)* = fdenv_a
  -- if id_p = id_a
  -- if $eq_set(fid, SET fid_p*, SET fid_a*)
def $gen_cstr(cstr, ParserT pt_p*, ParserT pt_a*) = $gen_cstrs(cstr, typ_p'*, typ_a'*)
  -- if (id_p dir typ_p' val_p? = pt_p)*
  -- if (id_a dir typ_a' val_a? = pt_a)*
def $gen_cstr(cstr, ControlT pt_p*, ControlT pt_a*) = $gen_cstrs(cstr, typ_p'*, typ_a'*)
  -- if (id_p dir typ_p' val_p? = pt_p)*
  -- if (id_a dir typ_a' val_a? = pt_a)*
def $gen_cstr(cstr, PackageT typ_p*, PackageT typ_a*) = $gen_cstrs(cstr, typ_p*, typ_a*)
def $gen_cstr(cstr, typ_p, typ_a) = cstr
  -- otherwise


def $merge_cstr'(cstr_o, cstr_n, eps, cstr) = cstr
def $merge_cstr'(cstr_o, cstr_n, tid_h tid_t*, cstr) = $merge_cstr'(cstr_o, cstr_n, tid_t*, cstr')
  -- if $find_env(tid, typ?, cstr_o, tid_h) = eps
  -- if $find_env(tid, typ?, cstr_n, tid_h) = typ_n
  -- if cstr' = $update_map(tid, typ?, cstr, tid_h, typ_n)
def $merge_cstr'(cstr_o, cstr_n, tid_h tid_t*, cstr) = $merge_cstr'(cstr_o, cstr_n, tid_t*, cstr')
  -- if $find_env(tid, typ?, cstr_o, tid_h) = typ_o
  -- if $find_env(tid, typ?, cstr_n, tid_h) = eps
  -- if cstr' = $update_map(tid, typ?, cstr, tid_h, typ_o)
def $merge_cstr'(cstr_o, cstr_n, tid_h tid_t*, cstr) = $merge_cstr'(cstr_o, cstr_n, tid_t*, cstr')
  -- if $find_env(tid, typ?, cstr_o, tid_h) = typ_o
  -- if $find_env(tid, typ?, cstr_n, tid_h) = typ_n
  -- Sub_impl: typ_o << typ_n
  -- if cstr' = $update_map(tid, typ?, cstr, tid_h, typ_n)
def $merge_cstr'(cstr_o, cstr_n, tid_h tid_t*, cstr) = $merge_cstr'(cstr_o, cstr_n, tid_t*, cstr')
  -- if $find_env(tid, typ?, cstr_o, tid_h) = typ_o
  -- if $find_env(tid, typ?, cstr_n, tid_h) = typ_n
  -- Sub_impl: typ_n << typ_o
  -- if cstr' = $update_map(tid, typ?, cstr, tid_h, typ_o)


def $merge_cstr(cstr_o, cstr_n) = $merge_cstr'(cstr_o, cstr_n, tid_o*, MAP eps eps)
  -- if MAP (PAIR tid_o typ_o?)* = cstr_o
  -- if MAP (PAIR tid_n typ_n?)* = cstr_n
  -- if $eq_set(tid, SET tid_o*, SET tid_n*)


def $merge_cstrs(MAP (PAIR tid typ?)*, eps) = MAP (PAIR tid typ?)*
def $merge_cstrs(cstr, cstr_h' cstr_t'*) = cstr'''
  -- if cstr'' = $merge_cstr(cstr, cstr_h')
  -- if cstr''' = $merge_cstrs(cstr'', cstr_t'*)


def $gen_cstrs(cstr, typ_p*, typ_a*) = $merge_cstrs(cstr, cstr'*)
  -- if |typ_p*| = |typ_a*|
  -- if (cstr' = $gen_cstr(cstr, typ_p, typ_a))*


def $resolve_cstrs(MAP eps eps) = MAP eps eps
def $resolve_cstrs(MAP (PAIR tid typ?)+) = $update_map(tid, typ, MAP (PAIR tid_t' typ_t')*, tid_h, typ_h')
  -- if tid_h tid_t* = tid*
  -- if typ_h? typ_t?* = typ?*
  -- if typ_h? = typ_h'
  -- if typ_h' =/= AnyT
  -- if MAP (PAIR tid_t' typ_t')* = $resolve_cstrs(MAP (PAIR tid_t typ_t?)*)


def $infer_targs(tid*, (id dir typ_p val?)*, typ_a*) = $resolve_cstrs(cstr')
  -- if cstr = $empty_cstr(tid*)
  -- if cstr' = $gen_cstrs(cstr, typ_p*, typ_a*)

;;
;; Function and Method invocation
;;

def $is_table_apply_in_action_arg(argIL) : bool   hint(show % CONTAINS TABLE.APPLY CALL)

rule Call_ok/actiont:
  p C |- (ActionT pt*) eps eps (argIL, typ_a)* id_deft* : VoidT eps argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- if |pt'*| = |argIL*|
  -- if (pt''*, (argIL', typ_a')*) = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- FuncType_wf: $bound_tid(C) |- ActionT pt*
  ----
  -- Call_site_ok: p C |- ActionT pt* : CALLSITE_OK
  -- if (~$is_table_apply_in_action_arg(argIL'))*
  ----
  -- (Call_convention_arg_ok: p C ACT |- pt'' ~~ (argIL', typ_a') : argIL'')*

rule Call_ok/extern-funct-no-targsinfer:
  p C |- (ExternFuncT pt* typ_r) eps targIL* (argIL, typ_a)* id_deft* : typ_r targIL* argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- if |pt'*| = |argIL*|
  -- if (pt''*, (argIL', typ_a')*) = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- FuncType_wf: $bound_tid(C) |- ExternFuncT pt* typ_r
  ----
  -- Call_site_ok: p C |- ExternFuncT pt* typ_r : CALLSITE_OK
  ----
  -- (Call_convention_arg_ok: p C NOACT |- pt'' ~~ (argIL', typ_a') : argIL'')*

rule Call_ok/extern-funct-targsinfer:
  p C |- (ExternFuncT pt* typ_r) tid_fresh* targIL* (argIL, typ_a)* id_deft* : typ_r' targIL''* argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- if |pt'*| = |argIL*|
  -- if (pt''*, (argIL', typ_a')*) = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- if theta = $infer_targs(tid_fresh*, pt''*, typ_a'*)
  ----
  -- if (targIL' = $find_map(tid, typ, theta, tid_fresh))*
  -- if targIL''* = targIL* ++ targIL'*
  ----
  -- if ExternFuncT pt'''* typ_r' = $subst_functyp(theta, ExternFuncT pt* typ_r)
  ----
  -- FuncType_wf: $bound_tid(C) |- ExternFuncT pt'''* typ_r'
  ----
  -- Call_site_ok: p C |- ExternFuncT pt'''* typ_r' : CALLSITE_OK
  ----
  -- (Call_convention_arg_ok: p C NOACT |- pt''' ~~ (argIL', typ_a') : argIL'')*

rule Call_ok/funct-no-targsinfer:
  p C |- (FuncT pt* typ_r) eps targIL* (argIL, typ_a)* id_deft* : typ_r targIL* argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- if |pt'*| = |argIL*|
  -- if (pt''*, (argIL', typ_a')*) = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- FuncType_wf: $bound_tid(C) |- (FuncT pt* typ_r)
  ----
  -- Call_site_ok: p C |- FuncT pt* typ_r : CALLSITE_OK
  ----
  -- (Call_convention_arg_ok: p C NOACT |- pt'' ~~ (argIL', typ_a') : argIL'')*

rule Call_ok/funct-targsinfer:
  p C |- (FuncT pt* typ_r) tid_fresh* targIL* (argIL, typ_a)* id_deft* : typ_r' targIL''* argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- if |pt'*| = |argIL*|
  -- if (pt''*, (argIL', typ_a')*) = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- if theta = $infer_targs(tid_fresh*, pt''*, typ_a'*)
  ----
  -- if (targIL' = $find_map(tid, typ, theta, tid_fresh))*
  -- if targIL''* = targIL* ++ targIL'*
  ----
  -- if FuncT pt'''* typ_r' = $subst_functyp(theta, FuncT pt* typ_r)
  ----
  -- FuncType_wf: $bound_tid(C) |- (FuncT pt'''* typ_r')
  ----
  -- Call_site_ok: p C |- FuncT pt'''* typ_r' : CALLSITE_OK
  ----
  -- (Call_convention_arg_ok: p C NOACT |- pt''' ~~ (argIL', typ_a') : argIL'')*

rule Call_ok/builtin-methodt:
  p C |- (BuiltinMethodT pt* typ_r) eps eps (argIL, typ_a)* id_deft* : typ_r eps argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- if |pt'*| = |argIL*|
  -- if (pt''*, (argIL', typ_a')*) = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- FuncType_wf: $bound_tid(C) |- BuiltinMethodT pt* typ_r
  ----
  -- Call_site_ok: p C |- BuiltinMethodT pt* typ_r : CALLSITE_OK
  -- (Call_convention_arg_ok: p C NOACT |- pt'' ~~ (argIL', typ_a') : argIL'')*

rule Call_ok/extern-methodt-no-targsinfer:
  p C |- (ExternMethodT pt* typ_r) eps targIL* (argIL, typ_a)* id_deft* : typ_r targIL* argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- if |pt'*| = |argIL*|
  -- if (pt''*, (argIL', typ_a')*) = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- FuncType_wf: $bound_tid(C) |- ExternMethodT pt* typ_r
  ----
  -- Call_site_ok: p C |- ExternMethodT pt* typ_r : CALLSITE_OK
  ----
  -- (Call_convention_arg_ok: p C NOACT |- pt'' ~~ (argIL', typ_a') : argIL'')*

rule Call_ok/extern-methodt-targsinfer:
  p C |- (ExternMethodT pt* typ_r) tid_fresh* targIL* (argIL, typ_a)* id_deft* : typ_r' targIL''* argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- if |pt'*| = |argIL*|
  -- if (pt''*, (argIL', typ_a')*) = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- if theta = $infer_targs(tid_fresh*, pt''*, typ_a'*)
  ----
  -- if (targIL' = $find_map(tid, typ, theta, tid_fresh))*
  -- if targIL''* = targIL* ++ targIL'*
  ----
  -- if ExternMethodT pt'''* typ_r' = $subst_functyp(theta, ExternMethodT pt* typ_r)
  ----
  -- FuncType_wf: $bound_tid(C) |- ExternMethodT pt'''* typ_r'
  ----
  -- Call_site_ok: p C |- ExternMethodT pt'''* typ_r' : CALLSITE_OK
  ----
  -- (Call_convention_arg_ok: p C NOACT |- pt''' ~~ (argIL', typ_a') : argIL'')*

rule Call_ok/extern-abstract-methodt-no-targsinfer:
  p C |- (ExternAbstractMethodT pt* typ_r) eps targIL* (argIL, typ_a)* id_deft* : typ_r targIL* argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- if |pt'*| = |argIL*|
  -- if (pt''*, (argIL', typ_a')*) = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- FuncType_wf: $bound_tid(C) |- ExternAbstractMethodT pt* typ_r
  ----
  -- Call_site_ok: p C |- ExternAbstractMethodT pt* typ_r : CALLSITE_OK
  ----
  -- (Call_convention_arg_ok: p C NOACT |- pt'' ~~ (argIL', typ_a') : argIL'')*

rule Call_ok/extern-abstract-methodt-targsinfer:
  p C |- (ExternAbstractMethodT pt* typ_r) tid_fresh* targIL* (argIL, typ_a)* id_deft* : typ_r' targIL''* argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- if |pt'*| = |argIL*|
  -- if (pt''*, (argIL', typ_a')*) = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- if theta = $infer_targs(tid_fresh*, pt''*, typ_a'*)
  ----
  -- if (targIL' = $find_map(tid, typ, theta, tid_fresh))*
  -- if targIL''* = targIL* ++ targIL'*
  ----
  -- if ExternAbstractMethodT pt'''* typ_r' = $subst_functyp(theta, ExternAbstractMethodT pt* typ_r)
  ----
  -- FuncType_wf: $bound_tid(C) |- ExternAbstractMethodT pt'''* typ_r'
  ----
  -- Call_site_ok: p C |- ExternAbstractMethodT pt'''* typ_r' : CALLSITE_OK
  ----
  -- (Call_convention_arg_ok: p C NOACT |- pt''' ~~ (argIL', typ_a') : argIL'')*

rule Call_ok/parser-apply-methodt:
  p C |- (ParserApplyMethodT pt*) eps eps (argIL, typ_a)* id_deft* : VoidT eps argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- if |pt'*| = |argIL*|
  -- if (pt''*, (argIL', typ_a')*) = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- FuncType_wf: $bound_tid(C) |- (ParserApplyMethodT pt*)
  ----
  -- Call_site_ok: p C |- ParserApplyMethodT pt* : CALLSITE_OK
  ----
  -- (Call_convention_arg_ok: p C NOACT |- pt'' ~~ (argIL', typ_a') : argIL'')*

rule Call_ok/control-apply-methodt:
  p C |- (ControlApplyMethodT pt*) eps eps (argIL, typ_a)* id_deft* : VoidT eps argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- if |pt'*| = |argIL*|
  -- if (pt''*, (argIL', typ_a')*) = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- FuncType_wf: $bound_tid(C) |- ControlApplyMethodT pt*
  ----
  -- Call_site_ok: p C |- ControlApplyMethodT pt* : CALLSITE_OK
  ----
  -- (Call_convention_arg_ok: p C NOACT |- pt'' ~~ (argIL', typ_a') : argIL'')*

rule Call_ok/table-apply-methodt:
  p C |- (TableApplyMethodT typ_r) eps eps eps : typ_r eps eps
  -- FuncType_wf: $bound_tid(C) |- TableApplyMethodT typ_r
  ----
  -- Call_site_ok: p C |- TableApplyMethodT typ_r : CALLSITE_OK

;;
;; Constructor typing
;; (TODO-Jaehyun) should consider fresh type identifier insertion
;;

rule ConsType_ok:
   p C |- name targIL* argIL* : constyp eps id_deft*
   -- if (cid, consdef, id_deft*) = $find_consdef(GLOBAL, C, name, argIL*)
   -- if constyp = $specialize_consdef(consdef, targIL*)

;;
;; Constructor invocation
;;

rule Inst_site_ok/global:
  GLOBAL C |- (ConsT pt* typ_i) : INSTSITE_OK
  -- if typ_i' = $canon_typ(typ_i)
  -- if $is_externt(typ_i') \/ $is_packaget(typ_i')

rule Inst_site_ok/block-package:
  BLOCK C |- (ConsT pt* typ_i) : INSTSITE_OK
  -- if typ_i' = $canon_typ(typ_i)
  -- if C.BLOCK.KIND = PACKAGE
  ----
  -- if $is_externt(typ_i') \/ $is_parsert(typ_i')
      \/ $is_controlt(typ_i') \/ $is_packaget(typ_i')

rule Inst_site_ok/block-parser:
  BLOCK C |- (ConsT pt* typ_i) : INSTSITE_OK
  -- if typ_i' = $canon_typ(typ_i)
  -- if C.BLOCK.KIND = PARSER
  ----
  -- if $is_externt(typ_i') \/ $is_parsert(typ_i')

rule Inst_site_ok/block-control:
  BLOCK C |- (ConsT pt* typ_i) : INSTSITE_OK
  -- if typ_i' = $canon_typ(typ_i)
  -- if C.BLOCK.KIND = CONTROL
  ----
  -- if $is_externt(typ_i') \/ $is_controlt(typ_i') \/ $is_tablet(typ_i')

rule Inst_site_ok/local-parserstate:
  LOCAL C |- (ConsT pt* typ_i) : INSTSITE_OK
  -- if typ_i' = $canon_typ(typ_i)
  -- if C.LOCAL.KIND = PARSERSTATE
  ----
  -- if $is_externt(typ_i') \/ $is_parsert(typ_i')

rule Inst_site_ok/local-controlapplymethod:
  LOCAL C |- (ConsT pt* typ_i) : INSTSITE_OK
  -- if typ_i' = $canon_typ(typ_i)
  -- if C.LOCAL.KIND = CONTROLAPPLYMETHOD
  ----
  -- if $is_externt(typ_i') \/ $is_controlt(typ_i')


rule Inst_ok/global-packaget-no-targsinfer:
  GLOBAL C_0 |- (ConsT pt* typ_i) eps targIL* (argIL, typ_a)* id_deft* : typ_i targIL* argIL''*
  -- if PackageT typ_i'* = $canon_typ(typ_i)
  -- if C_1 = $set_blockkind(C_0, PACKAGE)
  ----
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- if |pt'*| = |argIL*|
  -- if (pt''*, (argIL', typ_a')*) = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- ConsType_wf: $bound_tid(C_1) |- (ConsT pt* typ_i)
  ----
  -- Inst_site_ok: BLOCK C_1 |- (ConsT pt* typ_i) : INSTSITE_OK
  -- (Call_convention_arg_ok: BLOCK C_1 NOACT |- pt'' ~~ (argIL', typ_a') : argIL'')*

rule Inst_ok/global-packaget-targsinfer:
  GLOBAL C_0 |- (ConsT pt* typ_i) tid_fresh* targIL* (argIL, typ_a)* id_deft* : typ_i' targIL''* argIL''*
  -- if PackageT typ_i'* = $canon_typ(typ_i)
  -- if C_1 = $set_blockkind(C_0, PACKAGE)
  ----
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- if |pt'*| = |argIL*|
  -- if (pt''*, (argIL', typ_a')*) = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- if theta = $infer_targs(tid_fresh*, pt''*, typ_a'*)
  ----
  -- if (targIL' = $find_map(tid, typ, theta, tid_fresh))*
  -- if targIL''* = targIL* ++ targIL'*
  ----
  -- if ConsT pt'''* typ_i' = $subst_constyp(theta, ConsT pt* typ_i)
  ----
  -- ConsType_wf: $bound_tid(C_1) |- (ConsT pt'''* typ_i')
  ----
  -- Inst_site_ok: BLOCK C_1 |- (ConsT pt'''* typ_i') : INSTSITE_OK
  -- (Call_convention_arg_ok: BLOCK C_1 NOACT |- pt''' ~~ (argIL', typ_a') : argIL'')*

rule Inst_ok/else-no-targsinfer:
  p C |- (ConsT pt* typ_i) eps targIL* (argIL, typ_a)* id_deft* : typ_i targIL* argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- if |pt'*| = |argIL*|
  -- if (pt''*, (argIL', typ_a')*) = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- ConsType_wf: $bound_tid(C) |- (ConsT pt* typ_i)
  ----
  -- Inst_site_ok: p C |- (ConsT pt* typ_i) : INSTSITE_OK
  -- (Call_convention_arg_ok: p C NOACT |- pt'' ~~ (argIL', typ_a') : argIL'')*

rule Inst_ok/else-targsinfer:
  p C |- (ConsT pt* typ_i) tid_fresh* targIL* (argIL, typ_a)* id_deft* : typ_i' targIL''* argIL''*
  -- if pt'* = $filter_default_args(pt*, id_deft*)
  ----
  -- if |pt'*| = |argIL*|
  -- if (pt''*, (argIL', typ_a')*) = $align_params_with_args(pt'*, (argIL, typ_a)*)
  ----
  -- if theta = $infer_targs(tid_fresh*, pt''*, typ_a'*)
  ----
  -- if (targIL' = $find_map(tid, typ, theta, tid_fresh))*
  -- if targIL''* = targIL* ++ targIL'*
  ----
  -- if ConsT pt'''* typ_i' = $subst_constyp(theta, ConsT pt* typ_i)
  ----
  -- ConsType_wf: $bound_tid(C) |- (ConsT pt'''* typ_i')
  ----
  -- Inst_site_ok: p C |- (ConsT pt'''* typ_i') : INSTSITE_OK
  -- (Call_convention_arg_ok: p C NOACT |- pt''' ~~ (argIL', typ_a') : argIL'')*