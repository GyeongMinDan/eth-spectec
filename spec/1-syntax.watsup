;; Primitives

syntax num = nat
syntax boolean = bool
syntax str = text
syntax path = str*

;; Variable

syntax id = str

syntax name =
  | TOP id   hint(show .%)
  | BARE id  hint(show %)

;; Operators

syntax unop = | BNOT | LNOT | UMINUS

syntax binop =
  | PLUS | SPLUS | MINUS | SMINUS
  | MUL | DIV | MOD | SHL | SHR
  | LE | GE | LT | GT |EQ | NE
  | BAND | BXOR | BOR
  | CONCAT | LAND | LOR

;; Types

syntax type =
  | T_VOID              hint(show VOID)
  | T_BOOL              hint(show BOOL)
  | T_MATCHKIND         hint(show MATCHKIND)
  | T_ERR               hint(show ERR)
  | T_STR               hint(show STR)
  | T_AINT              hint(show INT)
  | T_INT expr          hint(show INT%)
  | T_BIT expr          hint(show BIT%)
  | T_VBIT expr         hint(show VARBIT%)
  | T_NAME name         hint(show VAR %)
  | T_SPEC name type*   hint(show SPEC %`{%}) ;; TODO why isn't <%> allowed as hint
  | T_STACK type expr   hint(show STACK %[%])
  | T_TUPLE type*       hint(show TUPLE %)
  | T_ANY               hint(show ANY)

;; Parameters and Arguments

syntax dir = | NO | IN | OUT | INOUT
syntax param = id dir type expr?
syntax tparam = id*
syntax arg =
  | A_EXPR expr       hint(show %)
  | A_NAME id expr   hint(show % = %)
  | A_ANY             hint(show _)

;; Expressions

syntax field = str

syntax expr =
  | E_BOOL boolean            hint(show %)
  | E_STR str                 hint(show %)
  | E_NUM nat                 hint(show %)
  | E_VAR name                hint(show %)
  | E_LIST expr*              hint(show `{%})
  | E_RECORD (field, expr)*   hint(show `{%})
  | E_UN unop expr            hint(show (% %))
  | E_BIN binop expr expr     hint(show (% % %))
  | E_TERN expr expr expr     hint(show (% ? % `: %))
  | E_CAST type expr          hint(show ((%) %))
  | E_MASK expr expr          hint(show (% MASK %)) ;; TODO how to put &&& into hint
  | E_RANGE expr expr         hint(show (% ... %))
  | E_ARRACC expr expr        hint(show %`[%])
  | E_BITACC expr expr expr   hint(show %`[% `: %])
  | E_TYPEACC name field      hint(show %.%)
  | E_ERRACC field            hint(show ERROR.%)
  | E_EXPRACC expr field      hint(show %.%)
  | E_CALL expr type* arg*    hint(show %`{%}(%)) ;; TODO also, <> for type args
  | E_INST type arg*          hint(show %(%))

;; Statements

syntax block = stmt*

syntax label = str
syntax case =
  | C_CASE label  hint(show CASE %)
  | C_FALL label  hint(show CASE %) ;; TODO
  | C_DEFAULT     hint(show DEFAULT)
syntax swcase = case block

syntax mtch =
  | M_EXPR expr hint(show CASE %)
  | M_DEFAULT   hint(show DEFAULT)
  | M_ANY       hint(show CASE `_)
syntax selcase = mtch* str

syntax stmt =
  | I_EMPTY                   hint(show EMPTY)
  | I_ASSIGN expr expr        hint(show % := %)
  | I_SWITCH expr swcase*     hint(show SWITCH (%) %)
  | I_IF expr stmt stmt       hint(show IF (%) % %)
  | I_BLOCK block             hint(show `{ % })
  | I_EXIT                    hint(show EXIT)
  | I_RET expr?               hint(show RETURN %)
  | I_CALL expr type* arg*    hint(show %`{%}(%)) ;; TODO, also type args
  | I_TRANS label             hint(show TRANSITION %)
  | I_SELECT expr* selcase*   hint(show SELECT (%) %)
  | I_DECL decl               hint(show %)

;; Declarations

syntax state = label block

syntax key = expr str
syntax action = id arg*
syntax entry = mtch* action
syntax default = action boolean
syntax custom = field expr boolean

syntax decl =
  | D_CONST id type expr                             hint(show CONST %2 %1 = %3)
  | D_VAR id type expr?                              hint(show %2 %1 = %3)
  | D_INST id type arg* block?                       hint(show %2 %1(%3) %4)
  | D_ERR field*                                     hint(show ERROR %)
  | D_MATCHKIND field*                               hint(show MATCHKIND %)
  | D_STRUCT id (field, type)*                       hint(show STRUCT % %)
  | D_HEADER id (field, type)*                       hint(show HEADER % %)
  | D_UNION id (field, type)*                        hint(show HEADER_UNION % %)
  | D_ENUM id field*                                 hint(show ENUM % %)
  | D_SENUM id type (field, expr)*                   hint(show ENUM % % %)
  | D_NEWTYPE id type? decl?                         hint(show TYPE %2 %3 %1)
  | D_TYPEDEF id type? decl?                         hint(show TYPEDEF %2 %3 %1)
  | D_VALUESET id type expr                          hint(show VALUE_SET`{%2}(%3) %1)
  | D_PARSERTYPE id tparam* param*                   hint(show PARSER %`{%}(%)) ;; TODO type params
  | D_PARSER id tparam* param* param* decl* state*   hint(show PARSER %`{%}(%)(%) % %) ;; TODO type params
  | D_ACTION id param* block                         hint(show ACTION %(%) %)
  | D_TABLE id key* entry* default? custom*          hint(show TABLE % % % % %)
  | D_CONTROLTYPE id tparam* param*                  hint(show CONTROL %`{%}(%)) ;; TODO type params
  | D_CONTROL id tparam* param* param* decl* block   hint(show CONTROL %`{%}(%)(%) % %) ;; TODO type params
  | D_FUNC id type tparam* param* block              hint(show %2 %1`{%3}(%4) %5) ;; TODO type params
  | D_EXTERNFUNC id type tparam* param*              hint(show EXTERN %2 %1`{%3}(%4)) ;; TOOD type params
  | D_CONS id param*                                 hint(show %(%))
  | D_ABSTRACT id type tparam* param*                hint(show ABSTRACT %2 %1`{%3}(%4)) ;; TODO type params
  | D_METHOD id type tparam* param*                  hint(show %2 %1`{%3}(%4)) ;; TODO type params
  | D_EXTERNOBJECT id tparam* decl*                  hint(show EXTERN`{%} %) ;; TODO type params
  | D_PACKAGETYPE id tparam* param*                  hint(show PACKAGE %`{%}(%)) ;; TODO type params

;; Program

syntax program = decl*
