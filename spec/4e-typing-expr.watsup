;;
;; Boolean expression
;;

rule Expr_ok/boole:
  p C |- BoolE b : (ValueE (BoolV b)) BoolT LCTK

;;
;; String expression
;;

rule Expr_ok/stre:
  p C |- StrE t : (ValueE (StrV t)) StrT LCTK

;;
;; Number expression
;;

rule Expr_ok/nume-intt:
  p C |- NumE (INT i) : (ValueE (IntV i)) IntT LCTK

rule Expr_ok/nume-fintt:
  p C |- NumE (FINT w i) : (ValueE (FIntV w bs)) (FIntT w) LCTK
  -- if bs = $of_two_complement(w, i)

rule Expr_ok/nume-fbitt:
  p C |- NumE (FBIT w i) : (ValueE (FBitV w bs)) (FBitT w) LCTK
  -- if bs = $of_two_complement(w, i)

;;
;; Variable expression
;;

rule Expr_ok/namee:
  p C |- NameE name : (NameE name) typ ctk
  -- if typ _ ctk _ = $find_styp(p, C, name)

;;
;; Sequence expression
;;

rule Expr_ok/seqe:
  p C |- SeqE expr* : (SeqE exprIL*) (SeqT typ*) ctk_e
  -- (Expr_ok: p C |- expr : exprIL typ ctk)*
  -- if ctk_e = $joins_ctk(ctk*)

rule Expr_ok/seqdefaulte:
  p C |- SeqDefaultE expr* : (SeqDefaultE exprIL*) (SeqDefaultT typ*) ctk_e
  -- (Expr_ok: p C |- expr : exprIL typ ctk)*
  -- if ctk_e = $joins_ctk(ctk*)

;;
;; Record expression
;;

rule Expr_ok/recorde:
  p C |- RecordE (member, expr)* : (RecordE (member, exprIL)*) (RecordT (member, typ)*) ctk_e
  -- (Expr_ok: p C |- expr : exprIL typ ctk)*
  -- if ctk_e = $joins_ctk(ctk*)

rule Expr_ok/recorddefaulte:
  p C |- RecordDefaultE (member, expr)* : (RecordE (member, exprIL)*) (RecordDefaultT (member, typ)*) ctk_e
  -- (Expr_ok: p C |- expr : exprIL typ ctk)*
  -- if ctk_e = $joins_ctk(ctk*)

;;
;; Default expression
;;

rule Expr_ok/defaulte:
  p C |- DefaultE : DefaultE DefaultT LCTK

;;
;; Invalid expression
;;

rule Expr_ok/invalide:
  p C |- InvalidE : (ValueE InvalidV) InvalidT LCTK

;;
;; Unary expression
;;

dec $compatible_bnot(typ) : bool
def $compatible_bnot(FIntT _) = true
def $compatible_bnot(FBitT _) = true
def $compatible_bnot(typ) = false
  -- otherwise

rule Expr_ok/une-bnot:
  p C |- UnE BNOT expr : (UnE BNOT exprIL_e) typ_e ctk
  -- Expr_ok: p C |- expr : exprIL typ ctk
  -- if (exprIL_e, typ_e) = $reduce_senum_unary((exprIL, typ), def $compatible_bnot)

dec $compatible_lnot(typ) : bool
def $compatible_lnot(BoolT) = true
def $compatible_lnot(typ) = false
  --otherwise

rule Expr_ok/une-lnot:
  p C |- UnE LNOT expr : (UnE LNOT exprIL_e) typ_e ctk
  -- Expr_ok: p C |- expr : exprIL typ ctk
  -- if (exprIL_e, typ_e) = $reduce_senum_unary((exprIL, typ), def $compatible_lnot)

dec $compatible_uplus(typ) : bool
def $compatible_uplus(IntT) = true
def $compatible_uplus(FIntT _) = true
def $compatible_uplus(FBitT _) = true
def $compatible_uplus(typ) = false
  -- otherwise

rule Expr_ok/une-uplus:
  p C |- UnE UPLUS expr : (UnE UPLUS exprIL_e) typ_e ctk
  -- Expr_ok: p C |- expr : exprIL typ ctk
  -- if (exprIL_e, typ_e) = $reduce_senum_unary((exprIL, typ), def $compatible_uplus)

dec $compatible_uminus(typ) : bool
def $compatible_uminus(IntT) = true
def $compatible_uminus(FIntT _) = true
def $compatible_uminus(FBitT _) = true
def $compatible_uminus(typ) = false
  -- otherwise

rule Expr_ok/une-uminus:
  p C |- UnE UMINUS expr : (UnE UPLUS exprIL_e) typ_e ctk
  -- Expr_ok: p C |- expr : exprIL typ ctk
  -- if (exprIL_e, typ_e) = $reduce_senum_unary((exprIL, typ), def $compatible_uminus)

;;
;; Binary expression
;;

dec $compatible_plusminusmult(typ, typ) : bool
def $compatible_plusminusmult(IntT, IntT) = true
def $compatible_plusminusmult(FIntT w, FIntT w) = true
def $compatible_plusminusmult(FBitT w, FBitT w) = true
def $compatible_plusminusmult(typ_l, typ_r) = false
  -- otherwise

rule Expr_ok/bine-plus-minus-mult:
  p C |- BinE binop expr_l expr_r : (BinE binop exprIL_l'' exprIL_r'') typ'' ctk
  -- if $in_set<binop>(binop, SET ([ PLUS, MINUS, MUL ]))
  ----
  -- Expr_ok: p C |- expr_l : exprIL_l typ_l ctk_l
  -- Expr_ok: p C |- expr_r : exprIL_r typ_r ctk_r
  ----
  -- if (typ', exprIL_l', exprIL_r') = $coerce_binary((exprIL_l, typ_l), (exprIL_r, typ_r))
  ----
  -- if ((exprIL_l'', typ''), (exprIL_r'', typ''))
        = $reduce_senums_binary((exprIL_l', typ'), (exprIL_r', typ'), def $compatible_plusminusmult)
  ----
  -- if ctk = $join_ctk(ctk_l, ctk_r)

dec $compatible_satplusminus(typ, typ) : bool
def $compatible_satplusminus(FIntT w, FIntT w) = true
def $compatible_satplusminus(FBitT w, FBitT w) = true
def $compatible_satplusminus(typ_l, typ_r) = false
  -- otherwise

rule Expr_ok/bine-sat-plus-minus:
  p C |- BinE binop expr_l expr_r : (BinE binop exprIL_l'' exprIL_r'') typ'' ctk
  -- if $in_set<binop>(binop, SET ([ SPLUS, SMINUS ]))
  ----
  -- Expr_ok: p C |- expr_l : exprIL_l typ_l ctk_l
  -- Expr_ok: p C |- expr_r : exprIL_r typ_r ctk_r
  ----
  -- if (typ', exprIL_l', exprIL_r') = $coerce_binary((exprIL_l, typ_l), (exprIL_r, typ_r))
  ----
  -- if ((exprIL_l'', typ''), (exprIL_r'', typ'')) = $reduce_senums_binary((exprIL_l', typ'), (exprIL_r', typ'), def $compatible_satplusminus)
  ----
  -- if ctk = $join_ctk(ctk_l, ctk_r)

dec $compatible_divmod(typ, typ) : bool
def $compatible_divmod(IntT, IntT) = true
def $compatible_divmod(typ_l, typ_r) = false
  -- otherwise

rule Expr_ok/bine-div-mod:
  p C |- BinE binop expr_l expr_r : (BinE binop exprIL_l'' exprIL_r'') typ'' ctk
  -- if $in_set<binop>(binop, SET ([ DIV, MOD ]))
  ----
  -- Expr_ok: p C |- expr_l : exprIL_l typ_l ctk_l
  -- Expr_ok: p C |- expr_r : exprIL_r typ_r ctk_r
  ----
  -- if (typ', exprIL_l', exprIL_r') = $coerce_binary((exprIL_l, typ_l), (exprIL_r, typ_r))
  ----
  -- if ((exprIL_l'', typ''), (exprIL_r'', typ'')) = $reduce_senums_binary((exprIL_l', typ'), (exprIL_r', typ'), def $compatible_divmod)
  ----
  -- if ctk = $join_ctk(ctk_l, ctk_r)

dec $compatible_shift(typ, typ) : bool
def $compatible_shift(IntT, IntT) = true
def $compatible_shift(IntT, FIntT _) = true
def $compatible_shift(IntT, FBitT _) = true
def $compatible_shift(FIntT _, IntT) = true
def $compatible_shift(FIntT _, FIntT _) = true
def $compatible_shift(FIntT _, FBitT _) = true
def $compatible_shift(FBitT _, IntT) = true
def $compatible_shift(FBitT _, FIntT _) = true
def $compatible_shift(FBitT _, FBitT _) = true
def $compatible_shift(typ_l, typ_r) = false
  -- otherwise

rule Expr_ok/bine-shift:
  p C |- BinE binop expr_l expr_r : (BinE binop exprIL_l' exprIL_r') typ_l' ctk
  -- if $in_set<binop>(binop, SET ([ SHL, SHR ]))
  ----
  -- Expr_ok: p C |- expr_l : exprIL_l typ_l ctk_l
  -- Expr_ok: p C |- expr_r : exprIL_r typ_r ctk_r
  ----
  -- if ((exprIL_l', typ_l'), (exprIL_r', typ_r')) = $reduce_senums_binary((exprIL_l, typ_l), (exprIL_r, typ_r), def $compatible_shift)
  ----
  -- if $implies($is_fintt(typ_r') \/ $is_intt(typ_r'), ctk_r = LCTK)
  ----
  -- if ctk = $join_ctk(ctk_l, ctk_r)

rule Expr_ok/bine-compare-eq:
  p C |- BinE binop expr_l expr_r : (BinE binop exprIL_l' exprIL_r') typ' ctk
  -- if $in_set<binop>(binop, SET ([ EQ, NE ]))
  ----
  -- Expr_ok: p C |- expr_l : exprIL_l typ_l ctk_l
  -- Expr_ok: p C |- expr_r : exprIL_r typ_r ctk_r
  ----
  -- if (typ', exprIL_l', exprIL_r') = $coerce_binary((exprIL_l, typ_l), (exprIL_r, typ_r))
  ----
  -- if $is_equalable(typ')
  ----
  -- if ctk = $join_ctk(ctk_l, ctk_r)

dec $compatible_compare(typ, typ) : bool
def $compatible_compare(IntT, IntT) = true
def $compatible_compare(FIntT w, FIntT w) = true
def $compatible_compare(FBitT w, FBitT w) = true
def $compatible_compare(typ_l, typ_r) = false
  -- otherwise

rule Expr_ok/bine-compare:
  p C |- BinE binop expr_l expr_r : (BinE binop exprIL_l'' exprIL_r'') typ'' ctk
  -- if $in_set<binop>(binop, SET ([ LE, GE, LT, GT ]))
  ----
  -- Expr_ok: p C |- expr_l : exprIL_l typ_l ctk_l
  -- Expr_ok: p C |- expr_r : exprIL_r typ_r ctk_r
  ----
  -- if (typ', exprIL_l', exprIL_r') = $coerce_binary((exprIL_l, typ_l), (exprIL_r, typ_r))
  ----
  -- if ((exprIL_l'', typ''), (exprIL_r'', typ'')) = $reduce_senums_binary((exprIL_l', typ'), (exprIL_r', typ'), def $compatible_compare)
  ----
  -- if ctk = $join_ctk(ctk_l, ctk_r)

dec $compatible_bitwise(typ, typ) : bool
def $compatible_bitwise(FIntT w, FIntT w) = true
def $compatible_bitwise(FBitT w, FBitT w) = true
def $compatible_bitwise(typ_l, typ_r) = false
  -- otherwise

rule Expr_ok/bine-bitwise:
  p C |- BinE binop expr_l expr_r : (BinE binop exprIL_l'' exprIL_r'') typ'' ctk
  -- if $in_set<binop>(binop, SET ([ BAND, BXOR, BOR ]))
  ----
  -- Expr_ok: p C |- expr_l : exprIL_l typ_l ctk_l
  -- Expr_ok: p C |- expr_r : exprIL_r typ_r ctk_r
  ----
  -- if (typ', exprIL_l', exprIL_r') = $coerce_binary((exprIL_l, typ_l), (exprIL_r, typ_r))
  ----
  -- if ((exprIL_l'', typ''), (exprIL_r'', typ'')) = $reduce_senums_binary((exprIL_l', typ'), (exprIL_r', typ'), def $compatible_bitwise)
  ----
  -- if ctk = $join_ctk(ctk_l, ctk_r)

dec $compatible_concat(typ, typ) : bool
def $compatible_concat(FIntT _, FIntT _) = true
def $compatible_concat(FIntT _, FBitT _) = true
def $compatible_concat(FBitT _, FIntT _) = true
def $compatible_concat(FBitT _, FBitT _) = true
def $compatible_concat(typ_l, typ_r) = false
  -- otherwise

rule Expr_ok/bine-concat-fint:
  p C |- BinE CONCAT expr_l expr_r : (BinE CONCAT exprIL_l' exprIL_r') typ'' ctk
  -- Expr_ok: p C |- expr_l : exprIL_l typ_l ctk_l
  -- Expr_ok: p C |- expr_r : exprIL_r typ_r ctk_r
  ----
  -- if ((exprIL_l', typ_l'), (exprIL_r', typ_r')) = $reduce_senums_binary((exprIL_l, typ_l), (exprIL_r, typ_r), def $compatible_concat)
  ----
  -- if w = $($get_width(typ_l') + $get_width(typ_r'))
  -- if $is_fintt(typ_l')
  -- if typ'' = FIntT w
  ----
  -- if ctk = $join_ctk(ctk_l, ctk_r)

rule Expr_ok/bine-concat-fbit:
  p C |- BinE CONCAT expr_l expr_r : (BinE CONCAT exprIL_l' exprIL_r') typ'' ctk
  -- Expr_ok: p C |- expr_l : exprIL_l typ_l ctk_l
  -- Expr_ok: p C |- expr_r : exprIL_r typ_r ctk_r
  ----
  -- if ((exprIL_l', typ_l'), (exprIL_r', typ_r')) = $reduce_senums_binary((exprIL_l, typ_l), (exprIL_r, typ_r), def $compatible_concat)
  ----
  -- if w = $($get_width(typ_l') + $get_width(typ_r'))
  -- if $is_fbitt(typ_l')
  -- if typ'' = FBitT w
  ----
  -- if ctk = $join_ctk(ctk_l, ctk_r)

dec $compatible_logical(typ, typ) : bool
def $compatible_logical(BoolT, BoolT) = true
def $compatible_logical(typ_l, typ_r) = false
  -- otherwise

rule Expr_ok/bine-logical:
  p C |- BinE binop expr_l expr_r : (BinE binop exprIL_l exprIL_r) BoolT ctk
  -- if $in_set<binop>(binop, SET ([ LAND, LOR ]))
  ----
  -- Expr_ok: p C |- expr_l : exprIL_l typ_l ctk_l
  -- Expr_ok: p C |- expr_r : exprIL_r typ_r ctk_r
  ----
  -- if (typ', exprIL_l', exprIL_r') = $coerce_binary((exprIL_l, typ_l), (exprIL_r, typ_r))
  ----
  -- if ((exprIL_l'', typ_l''), (exprIL_r'',typ_r'')) = $reduce_senums_binary((exprIL_l', typ'), (exprIL_r', typ'), def $compatible_logical)
  ----
  -- if ctk = $join_ctk(ctk_l, ctk_r)

;;
;; Ternary expression
;;

rule Expr_ok/terne:
  p C |- TernE expr_c expr_t expr_f : (TernE exprIL_c exprIL_t' exprIL_f') typ' ctk
  -- Expr_ok: p C |- expr_c : exprIL_c BoolT ctk_c
  ----
  -- Expr_ok: p C |- expr_t : exprIL_t typ_t ctk_t
  -- Expr_ok: p C |- expr_f : exprIL_f typ_f ctk_f
  ----
  -- if (typ', exprIL_t', exprIL_f') = $coerce_binary((exprIL_t, typ_t), (exprIL_f, typ_f))
  ----
  -- if $implies($is_intt(typ'), ctk_c = CTK \/ ctk_c = LCTK)
  ----
  -- if ctk = $joins_ctk([ ctk_c, ctk_t, ctk_f ])

;;
;; Cast expression
;;

rule Expr_ok/caste:
  p C |- CastE type expr_b : (CastE typ exprIL_b) typ ctk_b
  -- Type_ok: p C |- type : typ eps
  -- Expr_ok: p C |- expr_b : exprIL_b typ_b ctk_b
  -- Sub_expl: typ_b <: typ

;;
;; Mask expression
;;

dec $compatible_mask(typ, typ) : bool
def $compatible_mask(IntT, IntT) = true
def $compatible_mask(FIntT w, FIntT w) = true
def $compatible_mask(FBitT w, FBitT w) = true
def $compatible_mask(typ_l, typ_r) = false
  -- otherwise

rule Expr_ok/maske:
  p C |- MaskE expr_b expr_m : (MaskE exprIL_b'' exprIL_m'') (SetT typ'') DYN
  -- Expr_ok: p C |- expr_b : exprIL_b typ_b ctk_b
  -- Expr_ok: p C |- expr_m : exprIL_m typ_m ctk_m
  ----
  -- if (typ', exprIL_b', exprIL_m') = $coerce_binary((exprIL_b, typ_b), (exprIL_m, typ_m))
  ----
  -- if ((exprIL_b'', typ''), (exprIL_m'', typ'')) = $reduce_senums_binary((exprIL_b', typ'), (exprIL_m', typ'), def $compatible_mask)
  ----
  ;; -- Type_wf: $bound_tids(C) |- SetT typ''

;;
;; Range expression
;;

dec $compatible_range(typ, typ) : bool
def $compatible_range(IntT, IntT) = true
def $compatible_range(FIntT w, FIntT w) = true
def $compatible_range(FBitT w, FBitT w) = true
def $compatible_range(typ_l, typ_r) = false
  -- otherwise

rule Expr_ok/rangee:
  p C |- RangeE expr_lb expr_ub : (RangeE exprIL_lb'' exprIL_ub'') (SetT typ'') DYN
  -- Expr_ok: p C |- expr_lb : exprIL_lb typ_lb ctk_lb
  -- Expr_ok: p C |- expr_ub : exprIL_ub typ_ub ctk_ub
  ----
  -- if (typ', exprIL_ub', exprIL_lb') = $coerce_binary((exprIL_lb, typ_lb), (exprIL_ub, typ_ub))
  ----
  -- if ((exprIL_lb'', typ''), (exprIL_ub'', typ'')) = $reduce_senums_binary((exprIL_lb', typ'), (exprIL_ub', typ'), def $compatible_range)
  ----
  ;; -- Type_wf: $bound_tids(C) |- SetT typ''

;;
;; Select expression
;;

relation Select_case_keyset_ok:
  cursor context typ |- keyset : keysetIL
  hint(input %0 %1 %2 %3)

rule Select_case_keyset_ok/exprk-sett:
  LOCAL C typ_k |- ExprK expr : ExprK exprIL'
  -- Expr_ok: LOCAL C |- expr : exprIL (SetT typ) ctk
  ----
  -- if exprIL' = $coerce_assign((exprIL, SetT typ), SetT typ_k)

rule Select_case_keyset_ok/exprk-not-sett:
  LOCAL C typ_k |- ExprK expr : ExprK exprIL'
  -- Expr_ok: LOCAL C |- expr : exprIL typ ctk
  -- if ~$is_sett(typ)
  ----
  -- Sub_impl: typ << typ_k
  -- if exprIL' = CastE (SetT typ_k) exprIL

rule Select_case_keyset_ok/defaultk:
  LOCAL C typ_k |- DefaultK : DefaultK

rule Select_case_keyset_ok/anyk:
  LOCAL C typ_k |- AnyK : AnyK


relation Select_case_keysets_ok:
  cursor context |- typ* keyset* : keysetIL*
  hint(input %0 %1 %2 %3)

rule Select_case_keysets_ok/one-to-one:
  p C |- typ_k keyset : keysetIL
  -- Select_case_keyset_ok: p C typ_k |- keyset : keysetIL

rule Select_case_keysets_ok/many-to-one:
  p C |- typ_k* keyset : keysetIL
  -- Select_case_keyset_ok: p C (SeqT typ_k*) |- keyset : keysetIL

rule Select_case_keysets_ok/many-to-many:
  p C |- typ_k* keyset* : keysetIL*
  -- if |typ_k*| = |keyset*|
  -- (Select_case_keyset_ok: p C typ_k |- keyset : keysetIL)*


relation Select_case_ok:
  cursor context typ* |- selectcase : selectcaseIL
  hint(input %0 %1 %2 %3)

rule Select_case_ok:
  LOCAL C typ_k* |- keyset* statelabel : keysetIL* statelabel
  -- Select_case_keysets_ok: LOCAL C |- typ_k* keyset* : keysetIL*
  -- if StateT dir'' ctk'' eps = $find_styp(LOCAL, C, CURRENT statelabel)


rule Expr_ok/selecte:
  LOCAL C |- SelectE expr_k* selectcase* : (SelectE exprIL_k* selectcaseIL*) StateT DYN
  -- if C.LOCAL.KIND = PARSERSTATE
  -- (Expr_ok: LOCAL C |- expr_k : exprIL_k typ_k ctk_k)*
  ----
  -- (Type_wf: $bound_tids(LOCAL, C) |- SetT typ_k)*
  ----
  -- (Select_case_ok: LOCAL C typ_k* |- selectcase : selectcaseIL)*

;;
;; Array access expression
;;

dec $compatible_arrayindex(typ) : bool
def $compatible_arrayindex(IntT) = true
def $compatible_arrayindex(FIntT _) = true
def $compatible_arrayindex(FBitT _) = true
def $compatible_arrayindex(typ) = false
  -- otherwise

rule Expr_ok/arracce-tuplet:
  p C |- ArrAccE expr_b expr_i : (ArrAccE exprIL_b exprIL_i') typ DYN
  -- Expr_ok: p C |- expr_b : exprIL_b typ_b ctk_b
  -- Expr_ok: p C |- expr_i : exprIL_i typ_i ctk_i
  ----
  -- if (exprIL_i', typ_i') = $reduce_senum_unary((exprIL_i, typ_i), def $compatible_arrayindex)
  ----
  -- if TupleT typ_b'* = $canon_typ(typ_b)
  -- Eval_static: p C |- exprIL_i' ~> val_i
  -- if nat = $get_num(val_i)
  -- if typ = typ_b'*[nat]

rule Expr_ok/arracce-stackt:
  p C |- ArrAccE expr_b expr_i : (ArrAccE exprIL_b exprIL_i') typ_b' DYN
  -- Expr_ok: p C |- expr_b : exprIL_b typ_b ctk_b
  -- Expr_ok: p C |- expr_i : exprIL_i typ_i LCTK
  ----
  -- if (exprIL_i', typ_i') = $reduce_senum_unary((exprIL_i, typ_i), def $compatible_arrayindex)
  ----
  -- if StackT typ_b' int_s = $canon_typ(typ_b)

;;
;; Bitstring access expression
;;

dec $compatible_bitstringbase(typ) : bool
def $compatible_bitstringbase(IntT) = true
def $compatible_bitstringbase(FIntT w) = w > 0
def $compatible_bitstringbase(FBitT _) = true
def $compatible_bitstringbase(typ) = false
  -- otherwise

dec $compatible_bitstringindex(typ) : bool
def $compatible_bitstringindex(IntT) = true
def $compatible_bitstringindex(FIntT _) = true
def $compatible_bitstringindex(FBitT _) = true
def $compatible_bitstringindex(typ) = false
  -- otherwise

;; (TODO-Jaehyun) check bitstring slice range
rule Expr_ok/bitacce:
  p C |- BitAccE expr_b expr_l expr_h : (BitAccE exprIL_b' (ValueE val_l) (ValueE val_h)) typ ctk_b
  -- Expr_ok: p C |- expr_b : exprIL_b typ_b ctk_b
  ----
  -- if (exprIL_b', typ_b') = $reduce_senum_unary((exprIL_b, typ_b), def $compatible_bitstringbase)
  ----
  -- Expr_ok: p C |- expr_l : exprIL_l typ_l LCTK
  ----
  -- if (exprIL_l', typ_l') = $reduce_senum_unary((exprIL_l, typ_l), def $compatible_bitstringindex)
  ----
  -- Eval_static: p C |- exprIL_l' ~> val_l
  -- if n_l = $get_num(val_l)
  ----
  -- Expr_ok: p C |- expr_h : exprIL_h typ_h LCTK
  ----
  -- if (exprIL_h', typ_h') = $reduce_senum_unary((exprIL_h, typ_h), def $compatible_bitstringindex)
  ----
  -- Eval_static: p C |- exprIL_h' ~> val_h
  -- if n_h = $get_num(val_h)
  ----
  -- if typ = FBitT $(n_h - n_l + 1)

;;
;; Error access expression
;;

rule Expr_ok/erracce:
  p C |- ErrAccE member : (ValueE (ErrV member)) ErrT LCTK
  -- if id = $concat_text([ "error.", member ])
  -- if ErrV member = $find_val(p, C, TOP id)

;;
;; Type access expression
;;

rule Expr_ok/typeacce-enumt:
  p C |- TypeAccE name member : (ValueE (EnumFieldV id_t member)) typ LCTK
  -- if MonoD typ = $find_typdef(p, C, name)
  -- if EnumT id_t member_t* = $canon_typ(typ)
  -- if member <- member_t*

rule Expr_ok/typeacce-senumt:
  p C |- TypeAccE name member : (ValueE (SEnumFieldV id_t member val)) typ LCTK
  -- if MonoD typ = $find_typdef(p, C, name)
  -- if SEnumT id_t typ_t (member_t, val_t)* = $canon_typ(typ)
  -- if val = $assoc_<member, val>(member, (member_t, val_t)*)

;;
;; Expression access expression
;;

rule Expr_ok/expracce-stackt-size:
  p C |- ExprAccE expr_b "size" : (ExprAccE exprIL_b "size") (FBitT 32) LCTK
  -- Expr_ok: p C |- expr_b : exprIL_b typ_b ctk_b
  -- if StackT typ_s int_s = $canon_typ(typ_b)

rule Expr_ok/expracce-stackt-lastindex:
  p C |- ExprAccE expr_b "lastIndex" : (ExprAccE exprIL_b "lastIndex") (FBitT 32) DYN
  -- if (p = BLOCK /\ C.BLOCK.KIND = PARSER) \/ (p = LOCAL /\ C.LOCAL.KIND = PARSERSTATE)
  ----
  -- Expr_ok: p C |- expr_b : exprIL_b typ_b ctk_b
  -- if StackT typ_s int_s = $canon_typ(typ_b)

rule Expr_ok/expracce-stackt-last:
  p C |- ExprAccE expr_b "last" : (ExprAccE exprIL_b "last") typ_s DYN
  -- if (p = BLOCK /\ C.BLOCK.KIND = PARSER) \/ (p = LOCAL /\ C.LOCAL.KIND = PARSERSTATE)
  ----
  -- Expr_ok: p C |- expr_b : exprIL_b typ_b ctk_b
  -- if StackT typ_s int_s = $canon_typ(typ_b)

rule Expr_ok/expracce-stackt-next:
  p C |- ExprAccE expr_b "next" : (ExprAccE exprIL_b "next") typ_s DYN
  -- Expr_ok: p C |- expr_b : exprIL_b typ_b ctk_b
  -- if StackT typ_s int_s = $canon_typ(typ_b)

rule Expr_ok/expracce-structt:
  p C |- ExprAccE expr_b member : (ExprAccE exprIL_b member) typ DYN
  -- Expr_ok: p C |- expr_b : exprIL_b typ_b ctk_b
  -- if StructT id_s (member_s, typ_s)* = $canon_typ(typ_b)
  ----
  -- if typ = $assoc_<member, typ>(member, (member_s, typ_s)*)

rule Expr_ok/expracce-headert:
  p C |- ExprAccE expr_b member : (ExprAccE exprIL_b member) typ DYN
  -- Expr_ok: p C |- expr_b : exprIL_b typ_b ctk_b
  -- if HeaderT id_h (member_h, typ_h)* = $canon_typ(typ_b)
  ----
  -- if typ = $assoc_<member, typ>(member, (member_h, typ_h)*)

rule Expr_ok/expracce-uniont:
  p C |- ExprAccE expr_b member : (ExprAccE exprIL_b member) typ DYN
  -- Expr_ok: p C |- expr_b : exprIL_b typ_b ctk_b
  -- if UnionT id_u (member_u, typ_u)* = $canon_typ(typ_b)
  ----
  -- if typ = $assoc_<member, typ>(member, (member_u, typ_u)*)

rule Expr_ok/expracce-tablestructt:
  p C |- ExprAccE expr_b member : (ExprAccE exprIL_b member) typ DYN
  -- Expr_ok: p C |- expr_b : exprIL_b typ_b ctk_b
  -- if TableStructT id_t (member_t, typ_t)* = $canon_typ(typ_b)
  ----
  -- if typ = $assoc_<member, typ>(member, (member_t, typ_t)*)

;;
;; Function call expression
;;

rule Expr_ok/callfunce:
  p C |- CallFuncE name targ* arg* : (CallFuncE name targIL'* argIL'*) typ DYN
  -- (Type_ok: p C |- targ : targIL tid_fresh_a*)*
  -- if tid_fresh* = $concat_<tid>(tid_fresh_a**)
  ----
  -- FuncType_ok: p C |- name targIL* arg* : ft tid_fresh_inserted* id_deft*
  ----
  -- if tid_fresh'* = $concat_<tid>(tid_fresh* :: tid_fresh_inserted*)
  ----
  -- Call_ok: p C tid_fresh'* |- ft targIL* arg* id_deft* : typ targIL'* argIL'*
  -- if typ =/= VoidT

;;
;; Method call expression
;;

rule Expr_ok/callmethode:
  p C |- CallMethodE expr_b member targ* arg* : (CallMethodE exprIL_b member targIL'* argIL'*) typ DYN
  ----
  -- (Type_ok: p C |- targ : targIL tid_fresh_a*)*
  -- if tid_fresh* = $concat_<tid>(tid_fresh_a**)
  ----
  -- MethodType_ok: p C |- expr_b member targIL* arg* : ft exprIL_b tid_fresh_inserted* id_deft*
  ----
  -- if tid_fresh'* = $concat_<tid>(tid_fresh* ++ tid_fresh_inserted*)
  ----
  -- Call_ok: p C tid_fresh'* |- ft targIL* arg* id_deft* : typ targIL'* argIL'*
  -- if typ =/= VoidT

;;
;; Type call expression
;;

rule Expr_ok/calltypee:
  p C |- CallTypeE name member eps eps : (CallTypeE name member eps eps) IntT DYN
  -- if typdef = $find_typdef(p, C, name)
  ----
  -- if $in_set<member>(member, SET ([ "minSizeInBits", "minSizeInBytes", "maxSizeInBits", "maxSizeInBytes" ]))
  ----
  -- if ft = BuiltinMethodT eps IntT
  ----
  -- Call_ok: p C eps |- ft eps eps eps : IntT eps eps

;;
;; Nameless instantiation expression
;;

rule Expr_ok/inste:
  p C |- InstE name targ* arg* : (InstE name targIL'* argIL'*) typ CTK
  -- (Type_ok: p C |- targ : targIL tid_fresh_a*)*
  -- if tid_fresh* = $concat_<tid>(tid_fresh_a**)
  ----
  -- ConsType_ok: p C |- name targIL* arg* : ct tid_fresh_inserted* id_deft*
  ----
  -- if tid_fresh'* = $concat_<tid>(tid_fresh* ++ tid_fresh_inserted*)
  ----
  -- Inst_ok: p C tid_fresh'* |- ct targIL* arg* id_deft* : typ targIL'* argIL'*
  ;; (TODO-Jaehyun) check that typ is not abstract

;;
;; Argument typing
;;

rule Arg_ok/expra:
  p C |- ExprA expr : (ExprA exprIL) typ
  -- Expr_ok: p C |- expr : exprIL typ ctk

rule Arg_ok/namea-some:
  p C |- NameA id expr : (NameA id exprIL) typ
  -- Expr_ok: p C |- expr : exprIL typ ctk

rule Arg_ok/expra-none:
  p C |- NameA id eps : (NameA id eps) AnyT

rule Arg_ok/anya:
  p C |- AnyA : AnyA AnyT
