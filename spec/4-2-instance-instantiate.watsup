;; Helper

def $var_decl_to_stmt(decl*) : stmt*


def $cclos_from_type(ccenv, type) : (cclos, type*)

def $cclos_from_type(CCE, T_NAME name) = (cclos, eps)
  -- if TOP id = name
  -- if cclos = $find_cclos(CCE, id)
def $cclos_from_type(CCE, T_NAME name) = (cclos, eps)
  -- if BARE id = name
  -- if cclos = $find_cclos(CCE, id)
def $cclos_from_type(CCE, T_SPEC name type*) = (cclos, type*)
  -- if TOP id = name
  -- if cclos = $find_cclos(CCE, id)
def $cclos_from_type(CCE, T_SPEC name type*) = (cclos, type*)
  -- if BARE id = name
  -- if cclos = $find_cclos(CCE, id)


;; Instantiation from constructor closure

rule Instantiate_cclos/cc_parser:
  CCE S IC path |- (CC_PARSER tparam* param* cparam* local* state*) targ* arg* : S'''
  ----
  -- if IC_callee = $init_icontext(IC.GENV)
  ----
  -- Interp_static_types: IC |- targ* : rtype*
  -- if IC_callee' = $iadd_tds_obj(IC_callee, tparam*, rtype*)
  ----
  -- if (cparam'*, expr*) = $align_args(cparam*, arg*)
  ;; TODO handle default params
  -- if (cparam' = id_cp dir_cp type_cp expr_cp)*
  ----
  -- Interp_static_types: IC |- type_cp* : rtype_cp*
  -- Interp_static_exprs: CCE S IC path |- expr* : S' val*
  ----
  -- if IC_callee'' = $iadd_vars_obj(IC_callee', id_cp*, rtype_cp*, val*)
  ----
  -- if (param = id_p dir_p type_p expr_p)*
  -- if (decl_p = D_VAR id_p type_p eps)*
  ----
  -- Instantiate_parser_local_decls: CCE S' IC_callee'' path |- local* : S'' IC_callee'''
  ----
  -- (if label block = state)*
  -- (if func = F_STATE block)*
  -- if IC_callee'''' = $iadd_funcs_obj(IC_callee''', label*, func*)
  ----
  -- if stmt_init* = $var_decl_to_stmt(local*)
  -- if block = stmt_init* (I_TRANS "start")
  -- if func_apply = F_METHOD IC_callee''''.OVIS eps param* block
  ----
  -- if obj = O_PARSER IC_callee''''.GVIS IC_callee''''.OENV func_apply
  -- if S''' = $add_obj(S'', path, obj)

rule Instantiate_cclos/cc_control:
  CCE S IC path |- (CC_CONTROL tparam* param* cparam* local* block) targ* arg* : S'''
  ----
  -- if IC_callee = $init_icontext(IC.GENV)
  ----
  -- Interp_static_types: IC |- targ* : rtype*
  -- if IC_callee' = $iadd_tds_obj(IC_callee, tparam*, rtype*)
  ----
  -- if (cparam'*, expr*) = $align_args(cparam*, arg*)
  ;; TODO handle default params
  -- if (cparam' = id_cp dir_cp type_cp expr_cp)*
  ----
  -- Interp_static_types: IC |- type_cp* : rtype_cp*
  -- Interp_static_exprs: CCE S IC path |- expr* : S' val_cp*
  ----
  -- if IC_callee'' = $iadd_vars_obj(IC_callee', id_cp*, rtype_cp*, val_cp*)
  ----
  -- if (param = id_p dir_p type_p expr_p)*
  -- if (decl_p = D_VAR id_p type_p eps)*
  ----
  -- Instantiate_control_local_decls: CCE S' IC_callee'' path |- decl_p* local* : S'' IC_callee'''
  ----
  -- if stmt_init* = $var_decl_to_stmt(local*)
  -- if block' = stmt_init* (I_BLOCK block)
  -- if func_apply = F_METHOD IC_callee'''.OVIS eps param* block'
  ----
  -- if obj = O_CONTROL IC_callee'''.GVIS IC_callee'''.OENV func_apply
  -- if S''' = $add_obj(S'', path, obj)

rule Instantiate_cclos/cc_package:
  CCE S IC path |- (CC_PACKAGE tparam* cparam*) targ* arg* : S''
  ----
  -- if IC_callee = $init_icontext(IC.GENV)
  ----
  -- if (cparam'*, expr*) = $align_args(cparam*, arg*)
  ;; TODO handle default params
  -- if (cparam' = id_cp dir_cp type_cp expr_cp)*
  ----
  -- Interp_static_types: IC |- type_cp* : rtype_cp*
  -- Interp_static_exprs: CCE S IC path |- expr* : S' val_cp*
  ----
  -- if IC_callee' = $iadd_vars_obj(IC_callee, id_cp*, rtype_cp*, val_cp*)
  ----
  -- if obj = O_PACKAGE
  -- if S'' = $add_obj(S', path, obj)

rule Instantiate_cclos/cc_extern:
  CCE S IC path |- (CC_EXTERN tparam* cparam* decl*) targ* arg* : S''
  ----
  -- if IC_callee = $init_icontext(IC.GENV)
  ----
  -- if (cparam'*, expr*) = $align_args(cparam*, arg*)
  ;; TODO handle default params
  -- if (cparam' = id_cp dir_cp type_cp expr_cp)*
  ----
  -- Interp_static_types: IC |- type_cp* : rtype_cp*
  -- Interp_static_exprs: CCE S IC path |- expr* : S' val_cp*
  ----
  -- if IC_callee' = $iadd_vars_obj(IC_callee, id_cp*, rtype_cp*, val_cp*)
  ----
  -- if IC_callee'' = $load_extern_local_decls(IC_callee', decl*)
  ----
  -- if gvis = IC_callee''.GVIS
  -- if obj = O_EXTERN gvis IC_callee.OENV
  -- if S'' = $add_obj(S', path, obj)


;; Instantiation from parser local declaration

rule Instantiate_parser_local_decls/base:
  CCE S IC path |- eps : S IC

rule Instantiate_parser_local_decls/rec:
  CCE S IC path |- decl decl* : S'' IC''
  -- Instantiate_parser_local_decl: CCE S IC path |- decl : S' IC'
  -- Instantiate_parser_local_decls: CCE S' IC' path |- decl* : S'' IC''


rule Instantiate_parser_local_decl/d_inst:
  CCE S IC path |- D_INST id type arg* block : S' IC'
  -- if path' = path id
  -- if (cclos, targ*) = $cclos_from_type(CCE, type)
  -- Instantiate_cclos: CCE S IC path' |- cclos targ* arg* : S'
  -- if val = V_REF path
  -- if rtype = RT_REF
  -- if IC' = $iadd_var_obj(IC, id, rtype, val)

;; TODO need concrete representation of value set objects
rule Instantiate_parser_local_decl/d_valueset:
  CCE S IC path |- D_VALUESET id type expr : S' IC'
  -- if path' = path id 
  -- if obj = O_VALUESET
  -- if val = V_REF path'
  -- if rtype = RT_REF
  -- if IC' = $iadd_var_obj(IC, id, rtype, val)
  -- if S' = $add_obj(S, path', obj)

rule Instantiate_parser_local_decl/d_load:
  CCE S IC path |- decl : S' IC'
  -- otherwise
  -- if IC' = $load_parser_local_decl(IC, decl)


;; Instantiation from control local declaration

rule Instantiate_control_local_decls/base:
  CCE S IC path |- eps : S IC

rule Instantiate_control_local_decls/rec:
  CCE S IC path |- decl decl* : S'' IC''
  -- Instantiate_control_local_decl: CCE S IC path |- decl : S' IC'
  -- Instantiate_control_local_decls: CCE S' IC' path |- decl* : S'' IC''


rule Instantiate_control_local_decl/d_inst:
  CCE S IC path |- D_INST id type arg* block : S' IC'
  -- if path' = path id
  -- if (cclos, targ*) = $cclos_from_type(CCE, type)
  -- Instantiate_cclos: CCE S IC path' |- cclos targ* arg* : S'
  -- if val = V_REF path
  -- if rtype = RT_REF
  -- if IC' = $iadd_var_obj(IC, id, rtype, val)

rule Instantiate_parser_local_decl/d_table:
  CCE S IC path |- D_TABLE id key* action* entry* default custom* : S' IC'
  -- if path' = path id
  -- if func_apply = F_TABLE IC.OVIS
  -- if obj = O_TABLE key* action* entry* default custom* func_apply
  -- if val = V_REF path'
  -- if rtype = RT_REF
  -- if IC' = $iadd_var_obj(IC, id, rtype, val)
  -- if S' = $add_obj(S, path', obj)

rule Instantiate_control_local_decl/d_load:
  CCE S IC path |- decl : S' IC'
  -- otherwise
  -- if IC' = $load_control_local_decl(IC, decl)


;; Instantiation from global declaration

rule Instantiate_global_decls/base:
  CCE S IC |- eps : CCE S IC

rule Instantiate_global_decls/rec:
  CCE S IC |- decl decl* : CCE'' S'' IC''
  -- Instantiate_global_decl: CCE S IC |- decl : CCE' S' IC'
  -- Instantiate_global_decls: CCE' S' IC' |- decl* : CCE'' S'' IC''


rule Instantiate_global_decl/d_inst:
  CCE S IC |- D_INST id type arg* block : CCE S' IC'
  -- if path = id
  -- if (cclos, targ*) = $cclos_from_type(CCE, type)
  -- Instantiate_cclos: CCE S IC path |- cclos targ* arg* : S'
  -- if val = V_REF path
  -- if rtype = RT_REF
  -- if IC' = $iadd_var_glob(IC, id, rtype, val)

rule Instantiate_global_decl/d_load:
  CCE S IC |- decl : CCE' S IC'
  -- otherwise 
  -- if (CCE', IC') = $load_global_decl(CCE, IC, decl) 


;; Entry point for instantiation

def $instantiate(program) = (CCE', S', IC')
  -- if CCE = eps
  -- if S = eps 
  -- if IC = $empty_icontext()
  -- if decl* = program
  -- Instantiate_global_decls: CCE S IC |- decl* : CCE' S' IC'
