;;
;; Big-step semantics for calls
;;

;; Copy-in/out calling convention

def $copyin_loc'(ctx, param, val) : ctx
def $copyin_loc'(C, id dir type expr, val) = C'
  -- if dir = OUT
  -- Interp_type : C |- type : rtype
  -- if val' = $default(rtype)
  -- if C' = $add_var_loc(C, id, rtype, val')
def $copyin_loc'(C, id dir type expr, val) = C'
  -- if dir = NO \/ dir = IN \/ dir = INOUT
  -- Interp_type : C |- type : rtype
  -- if C' = $add_var_loc(C, id, rtype, val)

def $copyin_loc(ctx, param*, val*) : ctx
def $copyin_loc(C, eps, eps) = C
def $copyin_loc(C, param param*, val val*) = C''
  -- if C' = $copyin_loc'(C, param, val)
  -- if C'' = $copyin_loc(C', param*, val*)

def $copyin_obj'(ctx, param, val) : ctx
def $copyin_obj'(C, id dir type expr, val) = C'
  -- if dir = OUT
  -- Interp_type : C |- type : rtype
  -- if val' = $default(rtype)
  -- if C' = $add_var_obj(C, id, rtype, val')
def $copyin_obj'(C, id dir type expr, val) = C'
  -- if dir = NO \/ dir = IN \/ dir = INOUT
  -- Interp_type : C |- type : rtype
  -- if C' = $add_var_obj(C, id, rtype, val)

def $copyin_obj(ctx, param*, val*) : ctx
def $copyin_obj(C, eps, eps) = C
def $copyin_obj(C, param param*, val val*) = C''
  -- if C' = $copyin_obj'(C, param, val)
  -- if C'' = $copyin_obj(C', param*, val*)

relation Copyout : sto ctx ctx param expr ~> ctx

rule Copyout/do:
  S C_caller C_callee param expr ~> C_caller'
  -- if param = id dir type expr'
  -- if dir = INOUT \/ dir = OUT
  -- if val = $find_var(C_callee, id)
  -- Interp_write: S C_caller |- expr <- val -| C_caller'

rule Copyout/pass:
   S C_caller C_callee param expr ~> C_caller
  -- if param = id dir type expr'
  -- if dir = NO \/ dir = IN

relation Copyouts : sto ctx ctx param* expr* ~> ctx

rule Copyouts/base:
  S C_caller C_callee eps eps ~> C_caller

rule Copyouts/rec:
  S C_caller C_callee (param param*) (expr expr*) ~> C_caller''
  -- Copyout: S C_caller C_callee param expr ~> C_caller'
  -- Copyouts: S C_caller' C_callee param* expr* ~> C_caller''

;; Distinguish function/method call

rule Interp_call/func:
  S C |- (E_VAR name) type* arg* : sig C'
  -- Interp_fcall: S C |- name type* arg* : sig C'

rule Interp_call/method:
  S C |- (E_EXPRACC expr_b mem) type* arg* : sig C'
  -- Interp_mcall: S C |- expr_b mem type* arg* : sig C'


;; Function call interpretation

rule Interp_fcall/top:
  S C_caller |- (TOP id) type* arg* : sig C_caller'
  ----
  -- if func = $find_func_glob(C_caller, id)
  ----
  -- if C_callee = $empty_context()[.ID = id][.GENV = C_caller.GENV]
  ----
  -- Interp_inter_call: S C_caller C_callee |- func type* arg* : sig C_caller'

rule Interp_fcall/bare-inter:
  S C_caller |- (BARE id) type* arg* : sig C_caller'
  ----
  -- if func = $find_func_glob(C_caller, id)
  ----
  -- if C_callee = $empty_context()[.ID = id][.GENV = C_caller.GENV]
  ----
  -- Interp_inter_call: S C_caller C_callee |- func type* arg* : sig C_caller'

rule Interp_fcall/bare-intra:
  S C_caller |- (BARE id) type* arg* : sig C_caller'
  ----
  -- if func = $find_func_obj(C_caller, id)
  ----
  -- if C_callee = $empty_context()[.ID = id][.GENV = C_caller.GENV][.OENV = C_caller.OENV]
  ----
  -- if C_callee' = C_callee[.GVIS = C_caller.GVIS]
  ----
  -- Interp_intra_call: S C_caller C_callee' |- func type* arg* : sig C_caller'


;; Method call interpretation

;; TODO
;; rule Interp_mcall/header:

;; TODO
;; rule Interp_mcall/stack:

rule Interp_mcall/object-extern:
  S C_caller |- expr_b mem type* arg* : sig C_caller''
  ----
  -- Interp_expr: S C_caller |- expr_b : C_caller' (V_REF path)
  ----
  -- if O_EXTERN vis_glob env_obj = $find_obj(S, path)
  ----
  -- if C_callee = $empty_context()[.PATH = path][.ID = mem][.GENV = C_caller.GENV][.OENV = env_obj]
  ----
  -- if C_callee' = C_callee[.GVIS = vis_glob]
  ----
  -- if func = $find_func_obj(C_callee', mem)
  ----
  -- Interp_inter_call: S C_caller C_callee' |- func type* arg* : sig C_caller''

rule Interp_mcall/object-parser:
  S C_caller |- expr_b "apply" type* arg* : sig C_caller''
  ----
  -- Interp_expr: S C_caller |- expr_b : C_caller' (V_REF path)
  ----
  -- if O_PARSER vis_glob env_obj func = $find_obj(S, path)
  ----
  -- if C_callee = $empty_context()[.PATH = path][.ID = "apply"][.GENV = C_caller.GENV][.OENV = env_obj]
  ----
  -- if C_callee' = C_callee[.GVIS = vis_glob]
  ----
  -- Interp_inter_call: S C_caller C_callee' |- func type* arg* : sig C_caller''

rule Interp_mcall/object-control:
  S C_caller |- expr_b "apply" type* arg* : sig C_caller''
  ----
  -- Interp_expr: S C_caller |- expr_b : C_caller' (V_REF path)
  ----
  -- if O_CONTROL vis_glob env_obj func = $find_obj(S, path)
  ----
  -- if C_callee = $empty_context()[.PATH = path][.ID = "apply"][.GENV = C_caller.GENV][.OENV = env_obj]
  ----
  -- if C_callee' = C_callee[.GVIS = vis_glob]
  ----
  -- Interp_inter_call: S C_caller C_callee' |- func type* arg* : sig C_caller''

rule Interp_mcall/object-table:
  S C_caller |- expr_b "apply" eps eps : sig C_caller''
  ----
  -- Interp_expr: S C_caller |- expr_b : C_caller' (V_REF path)
  ----
  -- if O_TABLE key* action* entry* default custom* func = $find_obj(S, path)
  ----
  -- if C_callee = $empty_context()[.PATH = path][.ID = "apply"][.GENV = C_caller.GENV][.OENV = C_caller.OENV]
  ----
  -- if C_callee' = C_callee[.GVIS = C_caller.GVIS] 
  ----
  ;; TODO pass table info to intra_call relation
  -- Interp_intra_call: S C_caller C_callee' |- func eps eps : sig C_caller''


;; Inter-scoped call

rule Interp_inter_call/extern:
  S C_caller C_callee |- (F_EXTERN vis_glob tparam* param*) type* arg* : sig C_caller''
  ----
  -- if C_callee' = C_callee[.GVIS = vis_glob]
  -- if C_callee'' = $enter_frame(C_callee')
  ----
  -- if (param'*, expr*) = $align_args(param*, arg*)
  ----
  ;; TODO consider type params
  -- Interp_exprs: S C_caller |- expr* : C_caller' val*
  ----
  -- if C_callee''' = $copyin_loc(C_callee'', param*, val*)
  ----
  -- Interp_extern: S C_callee''' |- id : sig C_callee''''
  ----
  -- Copyouts: S C_caller' C_callee''' param* expr* ~> C_caller''

rule Interp_inter_call/extern_method:
  S C_caller C_callee |- (F_EXTERNMETHOD vis_obj tparam* param*) type* arg* : sig C_caller''
  ----
  -- if C_callee' = C_callee[.OVIS = vis_obj]
  -- if C_callee'' = $enter_frame(C_callee')
  ----
  -- if (param'*, expr*) = $align_args(param*, arg*)
  ----
  ;; TODO consider type params
  -- Interp_exprs: S C_caller |- expr* : C_caller' val*
  ----
  -- if C_callee''' = $copyin_loc(C_callee'', param*, val*)
  ----
  -- Interp_extern: S C_callee''' |- id : sig C_callee''''
  ----
  -- Copyouts: S C_caller' C_callee''' param* expr* ~> C_caller''

rule Interp_inter_call/method:
  S C_caller C_callee |- (F_METHOD vis_obj tparam* param* block) type* arg* : sig C_caller''
  ----
  -- if C_callee' = C_callee[.OVIS = vis_obj]
  ----
  -- if (param'*, expr*) = $align_args(param*, arg*)
  ----
  ;; TODO consider type params
  -- Interp_exprs: S C_caller |- expr* : C_caller' val*
  ----
  -- if C_callee'' = $copyin_obj(C_callee', param*, val*)
  ----
  -- Interp_stmts: S CONT C_callee'' |- block : sig C_callee'''
  ----
  -- Copyouts: S C_caller' C_callee''' param* expr* ~> C_caller''

rule Interp_inter_call/action:
  S C_caller C_callee |- (F_ACTION vis param* block) type* arg* : sig C_caler''
  ----
  -- if C_callee' = C_callee[.GVIS = vis]
  -- if C_callee'' = $enter_frame(C_callee')
  ----
  -- if (param'*, expr*) = $align_args(param*, arg*)
  ----
  -- Interp_exprs: S C_caller |- expr* : C_caller' val*
  ----
  -- if C_callee''' = $copyin_loc(C_callee'', param*, val*)
  ----
  -- Interp_stmts: S CONT C_callee''' |- block : sig C_callee''''
  ----
  -- Copyouts: S C_caller' C_callee'''' param* expr* ~> C_caller''


;; Intra-scoped call

;; TODO
;; rule Interp_intra_call/table:

rule Interp_intra_call/action:
  S C_caller C_callee |- (F_ACTION vis param* block) type* arg* : sig C_caller'''
  ----
  -- if C_callee' = C_callee[.OVIS = vis]
  -- if C_callee'' = $enter_frame(C_callee')
  ----
  -- if (param'*, expr*) = $align_args(param*, arg*)
  ----
  -- Interp_exprs: S C_caller |- expr* : C_caller' val*
  ----
  -- if C_callee''' = $copyin_loc(C_callee'', param*, val*)
  ----
  -- Interp_stmts: S CONT C_callee''' |- block : sig C_callee''''
  ----
  -- Copyouts: S C_caller' C_callee'''' param* expr* ~> C_caller''
  ----
  -- if C_caller''' = C_caller''[.OENV = C_callee''''.OENV]
