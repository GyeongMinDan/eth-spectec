;;
;; Relations for well-formedness
;;

relation Type_wf: tidset |- typ
relation TypeDef_wf: tidset |- typdef

relation ParamType_wf: tidset |- paramtyp
relation ParamTypes_wf: tidset |- paramtyp*
relation FuncType_wf: tidset |- functyp
relation FuncDef_wf: tidset |- funcdef

relation CParamType_wf: tidset |- paramtyp
relation CParamTypes_wf: tidset |- paramtyp*
relation ConsType_wf: tidset |- constyp
relation ConsDef_wf: tidset |- consdef

;;
;; Well-formedness of types
;;

rule Type_wf/baset:
  tidset |- basetyp

rule Type_wf/vart:
  tidset |- VarT tid
  -- if tid <- tidset

rule Type_wf/spect:
  tidset |- SpecT ptd typ_a*
  -- if typ = $specialize_typdef(ptd, typ_a*)
  -- Type_wf: tidset |- typ

rule Type_wf/deft:
  tidset |- DefT typ
  ----
  -- if typ' = $canon_typ(typ)
  ----
  -- if ($is_base(typ') /\ ~$is_voidt(typ') /\ ~$is_matchkindt(typ'))
        \/ $is_vart(typ')
        \/ $is_newt(typ')
        \/ $is_data(typ')
  ----
  -- Type_wf: tidset |- typ

rule Type_wf/newt:
  tidset |- NewT id typ
  ----
  -- if typ' = $canon_typ(typ)
  ----
  -- if $is_boolt(typ')
        \/ $is_fintt(typ')
        \/ $is_fbitt(typ')
        \/ $is_vart(typ')
        \/ $is_newt(typ')
  ----
  -- Type_wf: tidset |- typ

rule Type_wf/enumt:
  tidset |- EnumT id member*
  -- if $distinct(member, member*)

rule Type_wf/senumt:
  tidset |- SEnumT id typ (member, val)*
  ----
  -- if $distinct(member, member*)
  ----
  -- if typ' = $canon_typ(typ)
  ----
  -- if $is_fintt(typ')
        \/ $is_fbitt(typ')
        \/ $is_vart(typ')
        \/ ($is_newt(typ') /\ $is_newt_in_senumt(typ'))
  ----
  -- Type_wf: tidset |- typ

rule Type_wf/listt:
  tidset |- ListT typ
  ----
  -- if typ' = $canon_typ(typ)
  ----
  -- if ($is_base(typ') /\ ~$is_voidt(typ'))
        \/ $is_newt(typ')
        \/ $is_data(typ')
  ----
  -- Type_wf: tidset |- typ

rule Type_wf/tuplet:
  tidset |- TupleT typ*
  ----
  -- if (typ' = $canon_typ(typ))*
  ----
  -- if ($is_errt(typ') \/ $is_boolt(typ')
          \/ ($is_num(typ') /\ ~$is_intt(typ'))
          \/ $is_vart(typ')
          \/ $is_newt(typ')
          \/ ($is_data(typ') /\ ~$is_listt(typ')))*
  ----
  -- (Type_wf: tidset |- typ)*

rule Type_wf/stackt:
  tidset |- StackT typ size
  ----
  -- if size >= 0
  ----
  -- if typ' = $canon_typ(typ)
  ----
  -- if $is_vart(typ') \/ $is_headert(typ') \/ $is_uniont(typ')
  ----
  -- Type_wf: tidset |- typ

rule Type_wf/structt:
  tidset |- StructT id (member, typ)*
  ----
  -- if $distinct(member, member*)
  ----
  -- if (typ' = $canon_typ(typ))*
  ----
  -- if ($is_errt(typ') \/ $is_boolt(typ')
        \/ ($is_num(typ') /\ ~$is_intt(typ'))
        \/ $is_vart(typ')
        \/ $is_newt(typ')
        \/ ($is_data(typ') /\ ~$is_listt(typ')))*
  ----
  -- (Type_wf: tidset |- typ)*

rule Type_wf/headert:
  tidset |- HeaderT id (member, typ)*
  ----
  -- if $distinct(member, member*)
  ----
  -- if (typ' = $canon_typ(typ))*
  ----
  -- if ($is_boolt(typ')
        \/ ($is_num(typ') /\ ~$is_intt(typ'))
        \/ $is_vart(typ')
        \/ $is_senumt(typ')
        \/ $is_structt_in_headert(typ'))*
  ----
  -- (Type_wf: tidset |- typ)*

rule Type_wf/uniont:
  tidset |- UnionT id (member, typ)*
  ----
  -- if $distinct(member, member*)
  ----
  -- if (typ' = $canon_typ(typ))*
  ----
  -- if ($is_vart(typ') \/ $is_headert(typ'))*
  ----
  -- (Type_wf: tidset |- typ)*

;; rule Type_wf/ExternT

rule Type_wf/parsert:
  tidset |- ParserT paramtyp*
  -- if (id dir typ val = paramtyp)*
  -- (Type_wf: tidset |- typ)*

rule Type_wf/controlt:
  tidset |- ControlT paramtyp*
  -- if (id dir typ val = paramtyp)*
  -- (Type_wf: tidset |- typ)*

rule Type_wf/packaget:
  tidset |- PackageT typ*
  -- (Type_wf: tidset |- typ)*

rule Type_wf/tablet:
  tidset |- TableT typ
  -- Type_wf: tidset |- typ

rule Type_wf/defaultt:
  tidset |- DefaultT

rule Type_wf/seqt:
  tidset |- SeqT typ*
  -- (Type_wf: tidset |- typ)*

rule Type_wf/seqdefaultt:
  tidset |- SeqDefaultT typ*
  -- (Type_wf: tidset |- typ)*

rule Type_wf/recordt:
  tidset |- RecordT (member, typ)*
  -- if $distinct(member, member*)
  -- (Type_wf: tidset |- typ)*

rule Type_wf/recorddefaultt:
  tidset |- RecordDefaultT (member, typ)*
  -- if $distinct(member, member*)
  -- (Type_wf: tidset |- typ)*

rule Type_wf/invalidt:
  tidset |- InvalidT

rule Type_wf/sett:
  tidset |- SetT typ
  ----
  -- if typ' = $canon_typ(typ)
  ----
  -- if $is_boolt(typ') \/ $is_fintt(typ') \/ $is_fbitt(typ')
        \/ $is_newt(typ')
        \/ $is_enumt(typ')
        \/ $is_senumt(typ')
        \/ ($is_tuplet(typ') /\ $is_tuplet_in_sett(typ'))
        \/ ($is_seqt(typ') /\ $is_seqt_in_sett(typ'))
  ----
  -- Type_wf: tidset |- typ

rule Type_wf/statet:
  tidset |- StateT

rule Type_wf/tableenumt:
  tidset |- TableEnumT id member*
  -- if $distinct(member, member*)

rule Type_wf/tablestructt:
  tidset |- TableStructT id (member, typ)*
  -- if $distinct(member, member*)
  -- (Type_wf: tidset |- typ)*

rule Type_wf/anyt:
  tidset |- AnyT

;;
;; Well-formedness of type definitions
;;

rule TypeDef_wf/monod:
  tidset |- MonoD typ
  ----
  -- if $is_vart(typ)
        \/ $is_deft(typ)
        \/ $is_newt(typ)
        \/ $is_enumt(typ)
        \/ $is_senumt(typ)
        \/ $is_tablet(typ)
  ----
  -- Type_wf: tidset |- typ

rule TypeDef_wf/polyd:
  tidset |- PolyD tparam* typ
  ----
  -- if $is_listt(typ)
        \/ $is_tuplet(typ)
        \/ $is_stackt(typ)
        \/ $is_structt(typ)
        \/ $is_headert(typ)
        \/ $is_uniont(typ)
        \/ $is_externt(typ)
        \/ $is_parsert(typ)
        \/ $is_controlt(typ)
        \/ $is_packaget(typ)
  ----
  -- if $distinct(tparam, tparam*)
  -- if tidset' = $union_set(tid, tidset, tparam*)
  -- Type_wf: tidset' |- typ

;;
;; Well-formedness of paramter types
;;

rule ParamType_wf/none:
  tidset |- id dir typ eps
  -- Type_wf: tidset |- typ
  -- if ~(typ = ExternT id_t fmap_t /\ dir =/= NO)

rule ParamType_wf/some:
  tidset |- id dir typ val?
  -- Type_wf: tidset |- typ
  -- if ~(typ = ExternT id_t fmap_t /\ dir =/= NO)
  -- if dir = IN \/ dir = NO

rule ParamTypes_wf:
  tidset |- paramtyp*
  -- if (id dir typ val = paramtyp)*
  -- if $distinct(id, id*)
  -- (ParamType_wf: tidset |- paramtyp)*

;;
;; Well-formedness of function types
;; (TODO) Restrict parameter types
;;

rule FuncType_wf/builtinmethodt:
  tidset |- BuiltinMethodT paramtyp* typ_r
  -- ParamTypes_wf: tidset |- paramtyp*
  -- Type_wf: tidset |- typ_r

;; (TODO) How to check that directionless action parameters
;; must be at the end of the parameter list?
rule FuncType_wf/actiont:
  tidset |- ActionT paramtyp*
  -- ParamTypes_wf: tidset |- paramtyp*
  -- (Type_wf: tidset |- typ)*

rule FuncType_wf/parserapplymethodt:
  tidset |- ParserApplyMethodT paramtyp*
  -- ParamTypes_wf: tidset |- paramtyp*

rule FuncType_wf/controlapplymethodt:
  tidset |- ControlApplyMethodT paramtyp*
  -- ParamTypes_wf: tidset |- paramtyp*

rule FuncType_wf/tableapplymethodt:
  tidset |- TableApplyMethodT (TableStructT id (member, typ)*)

rule FuncType_wf/externfunctiont:
  tidset |- ExternFuncT paramtyp* typ_r
  -- ParamTypes_wf: tidset |- paramtyp*
  -- Type_wf: tidset |- typ_r

rule FuncType_wf/functiont:
  tidset |- FuncT paramtyp* typ_r
  -- ParamTypes_wf: tidset |- paramtyp*
  -- Type_wf: tidset |- typ_r

rule FuncType_wf/externmethodt:
  tidset |- ExternMethodT paramtyp* typ_r
  -- ParamTypes_wf: tidset |- paramtyp*
  -- Type_wf: tidset |- typ_r

rule FuncType_wf/externabstractmethodt:
  tidset |- ExternMethodT paramtyp* typ_r
  -- ParamTypes_wf: tidset |- paramtyp*
  -- Type_wf: tidset |- typ_r

;;
;; Well-formedness of function definitions
;;

rule FuncDef_wf/monofd:
  tidset |- MonoFD functyp
  ----
  -- if $is_builtinmethodt(functyp)
        \/ $is_actiont(functyp)
        \/ $is_parserapplymethodt(functyp)
        \/ $is_controlapplymethodt(functyp)
        \/ $is_tableapplymethodt(functyp)
  ----
  -- FuncType_wf: tidset |- functyp

rule FuncDef_wf/polyfd:
  tidset |- PolyFD tparam* functyp
  ----
  -- if $is_externfunct(functyp)
        \/ $is_funct(functyp)
        \/ $is_externmethodt(functyp)
        \/ $is_externabstractmethodt(functyp)
  ----
  -- if $distinct(tparam, tparam*)
  -- if tidset' = $union_set(tid, tidset, tparam*)
  -- FuncType_wf: tidset' |- functyp

;;
;; Well-formedness of constructor paramter types
;;

rule CParamType_wf/none:
  tidset |- id NO typ eps
  -- Type_wf: tidset |- typ

rule CParamType_wf/some:
  tidset |- id NO typ val?
  -- Type_wf: tidset |- typ

rule CParamTypes_wf:
  tidset |- paramtyp*
  -- if (id dir typ val = paramtyp)*
  -- if $distinct(id, id*)
  -- (ParamType_wf: tidset |- paramtyp)*

;;
;; Well-formedness of constructor types
;;

rule ConsType_wf/externt:
  tidset |- paramtyp* (ExternT id fmap)
  -- CParamTypes_wf: tidset |- paramtyp*
  ----
  -- if (id dir typ val = paramtyp)*
  -- if (~$is_parsert(typ))*
  -- if (~$is_controlt(typ))*
  -- if (~$is_packaget(typ))*
  -- if (~$is_tablet(typ))*
  -- if (~$is_synth(typ))*

rule ConsType_wf/parsert:
  tidset |- paramtyp* (ParserT paramtyp'*)
  -- CParamTypes_wf: tidset |- paramtyp*
  ----
  -- if (id dir typ val = paramtyp)*
  -- if (~$is_controlt(typ))*
  -- if (~$is_packaget(typ))*
  -- if (~$is_tablet(typ))*
  -- if (~$is_synth(typ))*

rule ConsType_wf/controlt:
  tidset |- paramtyp* (ControlT paramtyp'*)
  -- CParamTypes_wf: tidset |- paramtyp*
  ----
  -- if (id dir typ val = paramtyp)*
  -- if (~$is_controlt(typ))*
  -- if (~$is_packaget(typ))*
  -- if (~$is_tablet(typ))*
  -- if (~$is_synth(typ))*

rule ConsType_wf/packaget:
  tidset |- paramtyp* (PackageT typ'*)
  -- CParamTypes_wf: tidset |- paramtyp*
  ----
  -- if (id dir typ val = paramtyp)*
  -- if (~$is_tablet(typ))*
  -- if (~$is_synth(typ))*

;;
;; Well-formedness of constructor definitions
;;

rule ConsDef_wf:
  tidset |- tparam* constyp
  ----
  -- if paramtyp* typ_r = constyp
  -- if typ_r' = $canon_typ(typ_r)
  ----
  -- if $is_externt(typ_r')
        \/ $is_parsert(typ_r')
        \/ $is_controlt(typ_r')
        \/ $is_packaget(typ_r')
  ----
  -- if $distinct(tparam, tparam*)
  -- if tidset' = $union_set(tid, tidset, tparam*)
  -- ConsType_wf: tidset' |- constyp
