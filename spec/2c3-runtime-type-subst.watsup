;;
;; Substitution (capture-avoiding)
;;

syntax theta hint(show %latex("\\theta")) = map<id, typ>

dec $free_typ(typ) : set<tid>                              hint(show %latex("FV(")#%1#%latex(")"))
dec $free_functyp(functyp) : set<tid>                      hint(show %latex("FV(")#%1#%latex(")"))

dec $subst_typ(theta, typ) : typ                           hint(show %2#%latex("/")#%1)
dec $subst_typdef_poly(theta, polytypdef) : polytypdef     hint(show %2#%latex("/")#%1)
dec $subst_funcdef(theta, funcdef) : funcdef               hint(show %2#%latex("/")#%1)
dec $subst_functyp(theta, functyp) : functyp               hint(show %2#%latex("/")#%1)
dec $subst_constyp(theta, constyp) : constyp               hint(show %2#%latex("/")#%1)

;;
;; Type substitutions
;;

def $subst_typ(theta, VarT id) = $find_map<id, typ>(theta, id)
  -- if $in_set<id>(id, $dom_map<id, typ>(theta))

def $subst_typ(theta, SpecT ptd typ*) = SpecT ptd' typ'*
  -- if ptd' = $subst_typdef_poly(theta, ptd)
  -- if typ'* = ($subst_typ(theta, typ))*

def $subst_typ(theta, DefT typ) = $subst_typ(theta, typ)

def $subst_typ(theta, NewT id typ) = NewT id ($subst_typ(theta, typ))

def $subst_typ(theta, SEnumT id typ (member, val)*) = SEnumT id ($subst_typ(theta, typ)) (member, val)*

def $subst_typ(theta, ListT typ) = ListT ($subst_typ(theta, typ))

def $subst_typ(theta, TupleT typ*) = TupleT ($subst_typ(theta, typ))*

def $subst_typ(theta, StackT typ int) = StackT ($subst_typ(theta, typ)) int

def $subst_typ(theta, StructT id (member, typ)*) = StructT id (member, $subst_typ(theta, typ))*

def $subst_typ(theta, HeaderT id (member, typ)*) = HeaderT id (member, $subst_typ(theta, typ))*

def $subst_typ(theta, UnionT id (member, typ)*) = UnionT id (member, $subst_typ(theta, typ))*

;;def $subst_typ(theta, ExternT id fmap) = ExternT id fmap'
;;  -- if MAP (PAIR fid funcdef)* = fmap
;;  -- if fmap' = MAP (PAIR fid $subst_funcdef(theta, funcdef))*

def $subst_typ(theta, ParserT paramtyp*) = ParserT paramtyp'*
  -- if (id dir typ val)* = paramtyp*
  -- if paramtyp'* = (id dir ($subst_typ(theta, typ)) val)*

def $subst_typ(theta, ControlT paramtyp*) = ControlT paramtyp'*
  -- if (id dir typ val)* = paramtyp*
  -- if paramtyp'* = (id dir ($subst_typ(theta, typ)) val)*

def $subst_typ(theta, PackageT typ*) = PackageT ($subst_typ(theta, typ))*

def $subst_typ(theta, TableT id typ) = TableT id ($subst_typ(theta, typ))

def $subst_typ(theta, TableStructT id (member, typ)*) = TableStructT id (member, $subst_typ(theta, typ))*

def $subst_typ(theta, SeqT typ*) = SeqT ($subst_typ(theta, typ))*

def $subst_typ(theta, SeqDefaultT typ*) = SeqDefaultT ($subst_typ(theta, typ))*

def $subst_typ(theta, RecordT (member, typ)*) = RecordT (member, $subst_typ(theta, typ))*

def $subst_typ(theta, RecordDefaultT (member, typ)*) = RecordDefaultT (member, $subst_typ(theta, typ))*

def $subst_typ(theta, SetT typ) = SetT ($subst_typ(theta, typ))

def $subst_typ(theta, typ) = typ
  -- otherwise

;;
;; Type definition substitutions
;;

def $subst_typdef_poly(theta, PolyD (tparam*, tparam_hidden*) -> typ) = PolyD (tparam''*, tparam''_hidden*) -> typ'
  -- if SET tid_free* = $diff_set<tid>($free_typ(typ), SET (tparam* ++ tparam_hidden*))
  -- if tidset_capture = $unions_set<tid>(($free_typ($find_map<tid, typ>(theta, tid_free)))*)
  ----
  -- if tparam'* = $fresh_tids(|tparam* ++ tparam_hidden*|)
  -- if ($not_in_set<tid>(tparam', tidset_capture))*
  ----
  -- if tparam''* = tparam'*[0 : |tparam*|]
  -- if tparam''_hidden* = tparam'*[|tparam*| : |tparam_hidden*|]
  ----
  -- if theta' = $extends_map<tid, typ>(theta, tparam*, (VarT tparam'')*)
  -- if theta'' = $extends_map<tid, typ>(theta', tparam_hidden*, (VarT tparam''_hidden)*)
  ----
  -- if typ' = $subst_typ(theta'', typ)

;;
;; Function definition substitutions
;;

def $subst_funcdef(theta, MonoFD ft) = MonoFD ($subst_functyp(theta, ft))

def $subst_funcdef(theta, PolyFD (tparam*, tparam_hidden*) -> ft) = PolyFD (tparam''*, tparam''_hidden*) -> ft'
  -- if SET tid_free* = $diff_set<tid>($free_functyp(ft), SET (tparam* ++ tparam_hidden*))
  -- if tidset_capture = $unions_set<tid>(($free_typ($find_map<tid, typ>(theta, tid_free)))*)
  ----
  -- if tparam'* = $fresh_tids(|tparam* ++ tparam_hidden*|)
  -- if ($not_in_set<tid>(tparam', tidset_capture))*
  ----
  -- if tparam''* = tparam'*[0 : |tparam*|]
  -- if tparam''_hidden* = tparam'*[|tparam*| : |tparam_hidden*|]
  ----
  -- if theta' = $extends_map<tid, typ>(theta, tparam*, (VarT tparam')*)
  -- if theta'' = $extends_map<tid, typ>(theta', tparam_hidden*, (VarT tparam''_hidden)*)
  ----
  -- if ft' = $subst_functyp(theta'', ft)

;;
;; Function type substitutions
;;

def $subst_functyp(theta, BuiltinMethodT paramtyp* typ) = BuiltinMethodT paramtyp'* ($subst_typ(theta, typ))
  -- if (id dir typ val?)* = paramtyp*
  -- if paramtyp'* = (id dir ($subst_typ(theta, typ)) val?)*

def $subst_functyp(theta, ActionT paramtyp*) = ActionT paramtyp'*
  -- if (id dir typ val?)* = paramtyp*
  -- if paramtyp'* = (id dir ($subst_typ(theta, typ)) val?)*

def $subst_functyp(theta, ParserApplyMethodT paramtyp*) = ParserApplyMethodT paramtyp'*
  -- if (id dir typ val?)* = paramtyp*
  -- if paramtyp'* = (id dir ($subst_typ(theta, typ)) val?)*

def $subst_functyp(theta, ControlApplyMethodT paramtyp*) = ControlApplyMethodT paramtyp'*
  -- if (id dir typ val?)* = paramtyp*
  -- if paramtyp'* = (id dir ($subst_typ(theta, typ)) val?)*

def $subst_functyp(theta, TableApplyMethodT typ) = TableApplyMethodT ($subst_typ(theta, typ))

def $subst_functyp(theta, ExternFuncT paramtyp* typ) = ExternFuncT paramtyp'* ($subst_typ(theta, typ))
  -- if (id dir typ val?)* = paramtyp*
  -- if paramtyp'* = (id dir ($subst_typ(theta, typ)) val?)*

def $subst_functyp(theta, FuncT paramtyp* typ) = FuncT paramtyp'* ($subst_typ(theta, typ))
  -- if (id dir typ val?)* = paramtyp*
  -- if paramtyp'* = (id dir ($subst_typ(theta, typ)) val?)*

def $subst_functyp(theta, ExternMethodT paramtyp* typ) = ExternMethodT paramtyp'* ($subst_typ(theta, typ))
  -- if (id dir typ val?)* = paramtyp*
  -- if paramtyp'* = (id dir ($subst_typ(theta, typ)) val?)*

def $subst_functyp(theta, ExternAbstractMethodT paramtyp* typ) = ExternAbstractMethodT paramtyp'* ($subst_typ(theta, typ))
  -- if (id dir typ val?)* = paramtyp*
  -- if paramtyp'* = (id dir ($subst_typ(theta, typ)) val?)*

;;
;; Constructor type substitutions
;;

def $subst_constyp(theta, ConsT paramtyp* typ) = ConsT paramtyp'* typ'
  -- if (id dir typ val?)* = paramtyp*
  -- if paramtyp'* = (id dir ($subst_typ(theta, typ)) val?)*
  ----
  -- if typ' = $subst_typ(theta, typ)

;;
;; Specializations
;;

;;
;; Typedef specialization
;;

dec $specialize_typdef(typdef, typ*) : typ  hint(show %#%latex("\\langle")#%#%latex("\\rangle"))

def $specialize_typdef(MonoD typ, eps) = typ
def $specialize_typdef(PolyD (tparam*, tparam_hidden*) -> typ, typ_a*) = $subst_typ(theta, typ)
  -- if tparam'* = tparam* ++ tparam_hidden*
  -- if theta = MAP (PAIR tparam' typ_a)*

;;
;; Funcdef specialization
;;

;; (TODO) consider missing type arguments
dec $specialize_funcdef(funcdef, typ*) : functyp  hint(show %#%latex("\\langle")#%#%latex("\\rangle"))

def $specialize_funcdef(MonoFD ft, eps) = ft
def $specialize_funcdef(PolyFD (tparam*, tparam_hidden*) -> ft, typ_a*) = $subst_functyp(theta, ft)
  -- if tparam'* = tparam* ++ tparam_hidden*
  -- if theta = MAP (PAIR tparam' typ_a)*

;;
;; Constructor definition specialization
;;

;; (TODO) consider missing type arguments
dec $specialize_consdef(consdef, typ*) : constyp  hint(show %#%latex("\\langle")#%#%latex("\\rangle"))

def $specialize_consdef(ConsD (tparam*, tparam_hidden*) -> ct, typ_a*) = $subst_constyp(theta, ct)
  -- if tparam'* = tparam* ++ tparam_hidden*
  -- if theta = MAP (PAIR tparam' typ_a)*

;;
;; Canonicalization (recursive specialization and typedef unrolling)
;;

dec $canon_typ(typ) : typ  hint(show %#%latex("|_{\\mathtt{canon}}"))

def $canon_typ(SpecT ptd typ_a*) = $canon_typ(typ)
  -- if typ = $specialize_typdef(ptd, typ_a*)
def $canon_typ(DefT typ) = $canon_typ(typ)
def $canon_typ(typ) = typ
  -- otherwise

dec $get_params_functyp(functyp) : paramtyp*                            hint(show GET_PARAMS_FUNCTYP(%1))
def $get_params_functyp(ActionT pt*) = pt*
def $get_params_functyp(ExternFuncT pt* typ_r) = pt*
def $get_params_functyp(FuncT pt* typ_r) = pt*
def $get_params_functyp(ExternMethodT pt* typ_r) = pt*
def $get_params_functyp(ExternAbstractMethodT pt* typ_r) = pt*
def $get_params_functyp(ParserApplyMethodT pt*) = pt*
def $get_params_functyp(ControlApplyMethodT pt*) = pt*
def $get_params_functyp(BuiltinMethodT pt* typ_r) = pt*
def $get_params_functyp(TableApplyMethodT typ_r) = eps

dec $get_params_funcdef(funcdef): paramtyp*                             hint(show GET_PARAMS_FUNCDEF(%1))
def $get_params_funcdef(MonoFD ft) = $get_params_functyp(ft)
def $get_params_funcdef(PolyFD (tparam*, tparam_hidden*) -> ft) = $get_params_functyp(ft)

dec $get_typ_ret_functyp(functyp) : typ                                 hint(show GET_TYP_RET_FUNCTYP(%1))
def $get_typ_ret_functyp(ActionT pt*) = VoidT
def $get_typ_ret_functyp(ExternFuncT pt* typ_r) = typ_r
def $get_typ_ret_functyp(FuncT pt* typ_r) = typ_r
def $get_typ_ret_functyp(ExternMethodT pt* typ_r) = typ_r
def $get_typ_ret_functyp(ExternAbstractMethodT pt* typ_r) = typ_r
def $get_typ_ret_functyp(ParserApplyMethodT pt*) = VoidT
def $get_typ_ret_functyp(ControlApplyMethodT pt*) = VoidT
def $get_typ_ret_functyp(BuiltinMethodT pt* typ_r) = typ_r
def $get_typ_ret_functyp(TableApplyMethodT typ_r) = typ_r

dec $get_typ_ret_funcdef(funcdef) : typ                                  hint(show GET_TYP_RET_FUNCDEF(%1))
def $get_typ_ret_funcdef(MonoFD ft) = $get_typ_ret_functyp(ft)
def $get_typ_ret_funcdef(PolyFD (tparam*, tparam_hidden*) -> ft) = $get_typ_ret_functyp(ft)
