;;
;; General bool functions
;;

dec $implies(bool, bool) : bool     hint(show % %latex("\\Rightarrow") %)

;;
;; General text functions
;;

dec $int_to_text(int) : text      hint(show %)

dec $concat_text(text*) : text    hint(show %)

;;
;; General sequence functions
;;

dec $opt_<x>(x*) : x?  hint(show %2)
def $opt_<x>(eps) = eps
def $opt_<x>(x) = x

dec $concat_<x>((x*)*) : x*  hint(show (++) %2)
def $concat_<x>(eps) = eps
def $concat_<x>((x*) :: (x'*)*) = x* ++ $concat_<x>((x'*)*)

dec $partition<t>(t*, nat) : (t*, t*)

;;
;; General set functions
;;

syntax set<k> hint(show %latex("\\{") %#%latex("^* \\}")) =
  SET k*      hint(show %latex("\\{") %#%latex("\\}"))

dec $in_set<k>(k, set<k>) : bool                hint(show %2 %latex("\\in") %3)
dec $not_in_set<k>(k, set<k>) : bool            hint(show %2 %latex("\\notin") %3)
dec $eq_set<k>(set<k>, set<k>) : bool           hint(show %2 %latex("=") %3)
dec $intersect_set<k>(set<k>, set<k>) : set<k>  hint(show %2 %latex("\\cap") %3)
dec $union_set<k>(set<k>, set<k>) : set<k>      hint(show %2 %latex("\\cup") %3)
dec $unions_set<k>(set<k>*) : set<k>            hint(show %latex("\\bigcup") %2)
dec $diff_set<k>(set<k>, set<k>) : set<k>       hint(show %2 %latex("\\setminus") %3)
dec $is_subset<k>(set<k>, set<k>) : bool        hint(show %2 %latex("\\subset") %3)

dec $distinct_<k>(k*) : bool  hint(show %2 $distinct)
def $distinct_<k>(eps) = true
def $distinct_<k>(k :: k'*) = ~(k <- k'*) /\ $distinct_<k>(k'*)

dec $setminus_<x>(x*, x*) : x*  hint(show %2\%3)
dec $setminus1_<x>(x, x*) : x*

def $setminus_<x>(eps, x*) = eps
def $setminus_<x>(x_1 :: x'*, x*) = $setminus1_<x>(x_1, x*) ++ $setminus_<x>(x'*, x*)
def $setminus1_<x>(x, eps) = x
def $setminus1_<x>(x, x_1 :: x'*) = eps                     -- if x = x_1
def $setminus1_<x>(x, x_1 :: x'*) = $setminus1_<x>(x, x'*)  -- otherwise

dec $setproduct_<x>((x*)*) : (x*)*  hint(show %latex("\\Large\\times") %2)
dec $setproduct1_<x>(x*, (x*)*) : (x*)*
dec $setproduct2_<x>(x, (x*)*) : (x*)*

def $setproduct_<x>(eps) = (eps)
def $setproduct_<x>((x_1*) :: (x*)*) = $setproduct1_<x>(x_1*, $setproduct_<x>((x*)*))
def $setproduct1_<x>(eps, (x*)*) = eps
def $setproduct1_<x>(x_1 :: x'*, (x*)*) = $setproduct2_<x>(x_1, (x*)*) ++ $setproduct1_<x>(x'*, (x*)*)
def $setproduct2_<x>(x_1, eps) = eps
def $setproduct2_<x>(x_1, (x'*) :: (x*)*) = (x_1 :: x'*) ++ $setproduct2_<x>(x_1, (x*)*)

;;
;; General map functions
;;

syntax pair<k, v> hint(show (% %latex("\\mapsto") %)) =
    PAIR k v      hint(show % %latex("\\mapsto") %)

syntax map<k, v>        hint(show %latex("\\{(")#% %latex("\\mapsto") %#%latex(")^*\\}")) =
    MAP pair<k, v>*     hint(show %latex("\\{")#%#%latex("\\}"))

dec $empty_map<k, v> : map<k, v>  hint(show %latex("\\{") %latex("\\}"))
def $empty_map<k, v> = MAP eps

dec $dom_map<k, v>(map<k, v>) : set<k>                  hint(show %latex("\\texttt{Dom}(")#%3#%latex(")"))

dec $find_map_opt<k, v>(map<k, v>, k) : v?              hint(show %3#`[%4]?)
dec $find_maps_opt<k, v>(map<k, v>*, k) : v?            hint(show %3#`[%4]?)
dec $find_map<k, v>(map<k, v>, k) : v                   hint(show %3#`[%4])

dec $add_map<k, v>(map<k, v>, k, v) : map<k, v>         hint(show %3#%latex("\\{") %4 %latex("\\mapsto") %5 %latex("\\}"))
dec $update_map<k, v>(map<k, v>, k, v) : map<k, v>      hint(show %3#%latex("\\{") %4 %latex("\\mapsto") %5 %latex("\\}"))
dec $extends_map<k, v>(map<k, v>, k*, v*) : map<k, v>   hint(show %3#%latex("\\{") %4 %latex("\\mapsto") %5 %latex("\\}"))
