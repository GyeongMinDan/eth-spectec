;; Parameter Type

syntax paramtyp = id dir typ val?


;; Runtime Type

syntax basetyp =
  | VoidT         hint(show VOID#_#T)
  | ErrT          hint(show ERR#_#T)
  | MatchKindT    hint(show MATCH#_#KIND#_#T)
  | StrT          hint(show STR#_#T)
  | BoolT         hint(show BOOL#_#T)
  | IntT          hint(show INT#_#T)
  | FIntT int     hint(show FINT#_#T#%latex("\\langle")#%#%latex("\\rangle"))
  | FBitT int     hint(show FBIT#_#T#%latex("\\langle")#%#%latex("\\rangle"))
  | VBitT int     hint(show VBIT#_#T#%latex("\\langle")#%#%latex("\\rangle")) 

syntax deftyp =
  | VarT id                         hint(show VAR#_#T %)
  | SpecT typdef typ*               hint(show SPEC#_#T %#%latex("\\langle")#%#%latex("\\rangle"))
  | DefT typ                        hint(show DEF#_#T %)
  | NewT id typ                     hint(show NEW#_#T % %)
  | EnumT id member*                hint(show ENUM#_#T % %latex("\\{")#%#%latex("\\}"))
  | SEnumT id typ (member, val)*    hint(show SENUM#_#T % %latex("\\{")#%#%latex("\\}"))
  | ListT typ                       hint(show LIST#_#T %)
  | TupleT typ*                     hint(show TUPLE#_#T %)
  | StackT typ int                  hint(show STACK#_#T %#`[%])
  | StructT id (member, typ)*       hint(show STRUCT#_#T % %latex("\\{")#%#%latex("\\}"))
  | HeaderT id (member, typ)*       hint(show HEADER#_#T % %latex("\\{")#%#%latex("\\}"))
  | UnionT id (member, typ)*        hint(show UNION#_#T % %latex("\\{")#%#%latex("\\}"))
  | ExternT id map(fid, funcdef)    hint(show EXTERN#_#T % %)
  | ParserT paramtyp*               hint(show PARSER#_#T (%))
  | ControlT paramtyp*              hint(show CONTROL#_#T (%))
  | PackageT typ*                   hint(show PACKAGE#_#T %)
  | TableT typ                      hint(show TABLE#_#T %)

syntax synthtyp =
  | DefaultT                        hint(show DEFAULT#_#T)
  | SeqT typ*                       hint(show SEQ#_#T %)
  | SeqDefaultT typ*                hint(show SEQ#_#DEFAULT#_#T %)
  | RecordT (member, typ)*          hint(show RECORD#_#T %latex("\\{")#%#%latex("\\}"))
  | RecordDefaultT (member, typ)*   hint(show RECORD#_#DEFAULT#_#T %latex("\\{")#%#%latex("\\}"))
  | InvalidT                        hint(show INVALID#_#T)
  | SetT typ                        hint(show SET#_#T)
  | StateT                          hint(show STATE#_#T)
  | TableEnumT id member*           hint(show TABLE#_#ENUM#_#T % %latex("\\{")#%#%latex("\\}"))
  | TableStructT id (member, typ)*  hint(show TABLE#_#STRUCT#_#T % %latex("\\{")#%#%latex("\\}"))
  | AnyT                            hint(show ANY#_#T)

syntax typ = basetyp | deftyp | synthtyp

var btyp : basetyp
var dtyp : deftyp
var styp : synthtyp


;; Type Definition

syntax typdef =
  | MonoD typ           hint(show MONO#_#D %)
  | PolyD tparam* typ   hint(show POLY#_#D % %latex("\\rightarrow") %)


;; Function Type

syntax functyp =
  | BuiltinMethodT paramtyp* typ          hint(show BUILTIN#_#METHOD#_#T (%) %latex("\\rightarrow") %)
  | ActionT paramtyp*                     hint(show ACTION#_#T (%))
  | ParserApplyMethodT paramtyp* typ      hint(show PARSER#_#APPLY#_#METHOD#_#T (%) %latex("\\rightarrow") %)
  | ControlApplyMethodT paramtyp* typ     hint(show CONTROL#_#APPLY#_#METHOD#_#T (%) %latex("\\rightarrow") %)
  | TableApplyMethodT paramtyp* typ       hint(show TABLE#_#APPLY#_#METHOD#_#T (%) %latex("\\rightarrow") %)
  | ExternFunctionT paramtyp* typ         hint(show EXTERN#_#FUNCTION#_#T (%) %latex("\\rightarrow") %)
  | FunctionT paramtyp* typ               hint(show FUNCTION#_#T (%) %latex("\\rightarrow") %)
  | ExternMethodT paramtyp* typ           hint(show EXTERN#_#METHOD#_#T (%) %latex("\\rightarrow") %)
  | ExternAbstractMethodT paramtyp* typ   hint(show EXTERN#_#ABSTRACT#_#METHOD#_#T (%) %latex("\\rightarrow") %)


;; Function Definition

syntax funcdef =
  | MonoFD functyp            hint(show MONO#_#FD %)
  | PolyFD tparam* functyp    hint(show POLY#_#FD % %latex("\\rightarrow") %)


;; Constructor Type

syntax constyp = paramtyp* typ  hint(show CONS#_#T (%) %latex("\\rightarrow") %)


;; Constructor Definition

syntax consdef = tparam* paramtyp* typ hint(show CONS#_#D#%latex("\\langle")#%#%latex("\\rangle") (%) %latex("\\rightarrow") %)


;; Substitution

def $subst_typ(tenv, typ) : typ


;; Specialization

def $specialize_typdef(typdef, typ*) : typ  hint(show %#%latex("\\langle")#%#%latex("\\rangle"))

def $specialize_funcdef(funcdef, typ*) : functyp  hint(show %#%latex("\\langle")#%#%latex("\\rangle"))

def $specialize_consdef(consdef, typ*) : constyp  hint(show %#%latex("\\langle")#%#%latex("\\rangle"))


;; Saturation

def $saturate_typ(typ) : typ  hint(show %#%latex("|_{\\mathtt{norm}}"))
